UNIVERZA V LJUBLJANI
FAKULTETA ZA RAÂƒUNALNIÂ’TVO IN INFORMATIKO

Programski
modul
za
krmiljenje
proizvodnih
procesov
z
uporabo
digitalne kamere

DIPLOMSKO DELO
NA VISOKOÂ’OLSKEM STROKOVNEM Â’TUDIJU

Mentor: doc. dr. Peter Peer

Ljubljana, 2011

Rezultati diplomskega dela so intelektualna lastnina Fakultete za raÂ£unalniÂ²tvo in informatiko Univerze v Ljubljani. Za objavljanje ali izkoriÂ²Â£anje rezultatov diplomskega
dela je potrebno pisno soglasje Fakultete za raÂ£unalniÂ²tvo in informatiko ter mentorja.

A

Besedilo je oblikovano z urejevalnikom besedil L TEX.

IZJAVA O AVTORSTVU
diplomskega dela

Spodaj podpisani

z vpisno Â²tevilko

Andrej Â’muc,

63010148,

sem avtor diplomskega dela z naslovom:

Programski modul za krmiljenje proizvodnih procesov z uporabo digitalne
kamere

S svojim podpisom zagotavljam, da:

â€¢

sem diplomsko delo izdelal/-a samostojno pod mentorstvom doc. dr.
Petra Peera

â€¢

so elektronska oblika diplomskega dela, naslov (slov., angl.), povzetek
(slov., angl.) ter kljuÂ£ne besede (slov., angl.) identiÂ£ni s tiskano obliko
diplomskega dela

â€¢

soglaÂ²am z javno objavo elektronske oblike diplomskega dela v zbirki
Dela FRI.

V Ljubljani, dne 17. 5. 2011

Podpis avtorja:

Zahvala
Na tem mestu bi se zahvalil dr. Borutu LenardiÂ£u, ki mi je z idejo in dostopom
do strojne opreme omogoÂ£il, da je diplomska naloga nastala.
Zahvaljujem se mentorju doc. dr. Petru Peeru za pomoÂ£ in spodbudo pri
pisanju diplomske naloge.
Zahvala gre tudi Zvonku BoÂ²tjanÂ£iÂ£u za mnenja in nasvete pri implementaciji programske opreme in Petru JakopiÂ£u, ki mi je predstavil proces izdelave
optiÂ£nih vlaken in svetoval pri vkljuÂ£evanju razvite programske opreme v proces.
Posebna zahvala gre starÂ²em za potrpeÂºljivost in podporo pri Â²tudiju in
Katji, ki mi je pri pisanju diplomske naloge stala ob strani.

Kazalo
Povzetek

1

Abstract

2

1

Uvod

3

1.1

Industrijska avtomatika . . . . . . . . . . . . . . . . . . . . . . .

3

1.2

Strojna oprema za nadzor naprav v industriji

5

1.3

1.4

2

3

SCADA

. . . . . . . . . .

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

1.3.1

Vmesnik za povezavo Â£lovek-stroj

1.3.2

Kontrolniki naprav

1.3.3

5

. . . . . . . . . . . . .

6

. . . . . . . . . . . . . . . . . . . . .

7

Komunikacijska infrastruktura . . . . . . . . . . . . . . .

8

Pregled vsebine

. . . . . . . . . . . . . . . . . . . . . . . . . . .

Opis obstojeÂ£ega sistema

9

10

2.1

ObstojeÂ£a programska reÂ²itev

. . . . . . . . . . . . . . . . . . .

10

2.2

Opis problema . . . . . . . . . . . . . . . . . . . . . . . . . . . .

11

2.3

Okolje .NET . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

11

2.4

Krmilniki Beckho

14

. . . . . . . . . . . . . . . . . . . . . . . . .

Programski modul za nadzor procesa z digitalno kamero

16

3.1

Kamera za nadzor procesa . . . . . . . . . . . . . . . . . . . . .

16

3.1.1

3.2
3.3

Barvni formati kamere

. . . . . . . . . . . . . . . . . . .

17

3.1.1.1

Format RGB

. . . . . . . . . . . . . . . . . . .

17

3.1.1.2

Monokromatski RGB8 format . . . . . . . . . .

18

3.1.1.3

Format YUV

. . . . . . . . . . . . . . . . . . .

18

3.1.1.4

Format Y800

. . . . . . . . . . . . . . . . . . .

19

Osnovni koncepti delovanja naprave . . . . . . . . . . . . . . . .

19

Programska reÂ²itev kontrole s kamero . . . . . . . . . . . . . . .

21

3.3.1

Kontrolnik SCADA . . . . . . . . . . . . . . . . . . . . .

21

3.3.2

Glavno okno kamere

27

. . . . . . . . . . . . . . . . . . . .

3.3.2.1

Glavni meni . . . . . . . . . . . . . . . . . . . .

27

3.3.2.2

Nastavljanje interesnega obmoÂ£ja . . . . . . . .

28

3.3.2.3

Nastavljanje lastnosti slike . . . . . . . . . . . .

29

3.3.2.4

Nastavljanje generiÂ£nih vhodnih parametrov . .

32

3.3.2.5

Prikaz slike

. . . . . . . . . . . . . . . . . . . .

32

3.4

Povezava modula z glavno aplikacijo

. . . . . . . . . . . . . . .

33

3.5

Arhitektura sistema . . . . . . . . . . . . . . . . . . . . . . . . .

34

3.6

Implementacija algoritmov za obdelavo slike

. . . . . . . . . . .

37

3.6.1

Metoda GetSupportedInputTypes . . . . . . . . . . . . .

37

3.6.2

Metoda GetTransformOutputTypes . . . . . . . . . . . .

38

3.6.3

Metoda Transform

. . . . . . . . . . . . . . . . . . . . .

38

3.6.4

Metoda ProcessImageData . . . . . . . . . . . . . . . . .

40

3.6.5

Metoda PaintOverlay . . . . . . . . . . . . . . . . . . . .

40

4

Primer uporabe

41

5

ZakljuÂ£ek

44

Seznam slik

45

Seznam tabel

46

Literatura

47

Seznam uporabljenih kratic in
simbolov
SCADA  Supervisory Control And Data Acquisition (nadzorna kontrola in
pridobivanje podatkov)

HMI  Human Machine Interface (vmesnik Â£lovekstroj)
PLC  Programmable logic controller (programabilni kontrolnik)
ROI  Region Of Interest (interesno obmoÂ£je)
XML  Extensible Markup Language (razÂ²irljiv oznaÂ£evalni jezik)

Povzetek
Diploma opisuje programsko reÂ²itev za kontrolo proizvoda industrijskega procesa s pomoÂ£jo digitalne kamere. Aplikacija, katere del je kamerin programski
modul za krmiljenje, je bila posebej razvita za kontrolo procesa proizvodnje
surovcev za optiÂ£na vlakna. Zaradi svoje generiÂ£ne zasnove je razvita reÂ²itev
primerna tudi za druga industrijska podroÂ£ja. ReÂ²itev deluje kot samostojen
modul znotraj aplikacije.

Pri procesu izdelave kamera zajema slike obdelo-

vanca in jih poÂ²ilja svojemu nadzornemu sistemu, ki je zaradi svoje generiÂ£ne
zasnove sposoben zajeto sliko procesirati na najrazliÂ£nejÂ²e naÂ£ine. Pridobljeni
podatki se poÂ²ljejo v obdelavo ostalim napravam, ki so del veÂ£jega sistema
SCADA. Programski modul za delo s kamero je tako po meri narejen kontrolni sistem, uporaben v realnem industrijskem okolju, kjer je prilagodljivost
na spremenljive zahteve proizvodnega procesa kljuÂ£nega pomena.
Ker reÂ²itev s kamero reÂ²uje zaokroÂºen problem v industriji, diploma opisuje
osnove nadzora industrijskih procesov in komunikacije med napravami v proizvodnji. Opisani so kljuÂ£ni elementi, potrebni za raÂ£unalniÂ²ki nadzor industrijskega procesa. Programski modul je razvit v okolju .NET in poizkuÂ²a izkoristiti prednosti, ki mu jih to okolje ponuja v primerjavi z v industriji bolj uveljavljenimi tehnologijami. Diploma poizkuÂ²a bralcu predstaviti svet avtomatike
z vidika .NET razvijalca in predstaviti prednosti takÂ²ne izbire tehnologije pred
bolj tradicionalno usmerjenimi tehnologijami v svetu avtomatike.

KljuÂ£ne besede:

SCADA, kamera, avtomatika, kontrola, proizvodnja, okolje .NET

1

Abstract
The diploma thesis describes software solution for controlling industrial
processes with the help of digital camera. The developed software module is a
part of application developed originally for optic bre preform manufacturing,
but can also be applied to other elds of industry. The digital camera solution
functions as an independent module inside control application. During manufacturing process it captures images of manufactured part and sends them into
its subsystem for further processing. Module is developed in such a manner
that multiple dierent algorithms can easily be applied to images, according
to process needs. Acquired data is then sent to various devices, which are part
of bigger SCADA system. Camera control module is custom made control system useful in real industrial environment, where adaptation to process changes
plays a vital role in production of high quality products.
Since developed solution solves specic industrial problem as a whole, the
diploma also describes basics of automation and process control. Basic elements needed for computer based process control are also described. In contrast
to more widely accepted solutions in industry, software was developed using
Microsoft .NET framework.

The diploma tries to introduce the aspect of

developing automation solutions from .NET developer's point of view. It also
discusses advantages of using such technology in contrast to more traditional
technologies used in automation.

Key words:

SCADA, camera automation, control, manufacturing, .NET framework

2

Poglavje 1
Uvod
1.1 Industrijska avtomatika
Âƒloveka v razvitem svetu vsepovsod obkroÂºajo raznovrstne dobrine. Kadar se
odloÂ£amo o nakupu nekega izdelka, lahko pogosto izbiramo med celo paleto
podobnih proizvodov in prodajalci nas prepriÂ£ujejo o njihovi kakovosti.

Âƒe

nam je bilo vÂ£asih dovolj imeti na izbiro nekaj osnovnih izdelkov, katere je relativno preprosto proizvesti, je velika ponudba kompleksnih in visokotehnoloÂ²kih
izdelkov dandanes nekaj samoumevnega.

Proizvajalci v svoje izdelke tako

vkljuÂ£ujejo najrazliÂ£nejÂ²e materiale in polizdelke, razvite s kompleksnimi postopki. Obstoja teh izdelkov in materialov se niti ne zavedamo, vendar pa bi se
ob njihovem pomanjkanju hitro zavedeli njihove nepogreÂ²ljivosti pri sodobnem
naÂ£inu Âºivljenja.
Malokdo se vpraÂ²a, kako taki izdelki pridejo na prodajne police, kako so
sestavljeni in kako jih, zaradi pogosto izjemno visokega povpraÂ²evanja, uspejo proizvesti v dovolj velikih koliÂ£inah.

Seveda si pri omenjenih vpraÂ²an-

jih proizvajalci pomagajo z najrazliÂ£nejÂ²imi stroji in napravami. NihÂ£e si ne
more predstavljati proizvodnje avtomobilov, pri kateri bi vse delo opravljal
Â£lovek roÂ£no. V sodobnih obratih to delo opravljajo stroji in to z veliko veÂ£jo
natanÂ£nostjo in hitrostjo kot bi bil to sposoben narediti Â£lovek. Obstaja veliko zapletenih tehnoloÂ²kih procesov, pri katerih Â£lovek igra manjÂ²o vlogo in
naprave, ki opravljajo doloÂ£eno delo, le nadzira.
Ker so tehnoloÂ²ki procesi vedno bolj zapleteni in zahtevajo hitro in natanÂ£no
odzivnost glede na parametre sistema (seveda ob visoki uÂ£inkovitosti), je raÂ£unalnik postal nepogreÂ²ljiv pri krmiljenju proizvodnih procesov. V sodobni
industriji je raÂ£unalnik postal Âºe tako nepogreÂ²ljiv kakor sam stroj, ki delovni
proces opravlja.

Kadar sliÂ²imo, da v doloÂ£eni industriji ne uporabljajo ra-

3

Poglavje 1: Uvod

4

Â£unalnikov pri krmiljenju proizvodnega procesa, nam pogosto pride na misel,
da najbrÂº proizvajajo izjemno enostaven izdelek in to ne v posebno velikih
koliÂ£inah. UÂ£inkovitost v njihovem proizvodnjem procesu pa je verjetno veliko
manjÂ²a kot bi bila, Â£e bi imeli raÂ£unalniÂ²ko podprto krmiljenje proizvodnje.

PodroÂ£je avtomatizacije proizvodnje je izjemno Â²iroko. Ker se v razliÂ£nih
vrstah industrije in tudi znotraj posameznih panog izdelke proizvaja na razliÂ£ne
naÂ£ine z uporabo razliÂ£nih, velikokrat tudi speciÂ£no prilagojenih strojev, se
inÂºenirji sooÂ£ajo s problemom njihovega krmiljenja. ManjÂ²i problemi takega
tipa se pojavljajo v industriji, kjer so tehnoloÂ²ki postopki Âºe dobro preverjeni
in uteÂ£eni, reÂ²itve na podroÂ£ju njihovega krmiljenja pa dobro znane. TakÂ²ni
procesi ne zahtevajo posebno velikega truda za njihovo raÂ£unalniÂ²ko podporo.

VeÂ£je teÂºave pa imajo inÂºenirji pri avtomatizaciji bolj kompleksnih in speciÂ£nih tehnoloÂ²kih postopkov, ki so ponekod Â²e v fazi raziskav in razvoja.
V takih primerih se pogosto zgodi, da so naprave v tehnoloÂ²kem postopku
popolnoma heterogene, postopki pa zahtevajo izjemno veliko prilagodljivost
sistema na razliÂ£ne oblike prilagoditev. Pri naÂ£rtovanju kontrolnih sistemov za
kompleksne tehnoloÂ²ke postopke se tako inÂºenirji sreÂ£ujejo z izjemno velikim
Â²tevilom parametrov.

RaÂ£unalniÂ²ki sistem, ki krmili tak tehnoloÂ²ki proces

mora biti sposoben hitro preraÂ£unavati razliÂ£ne vrednosti, katere mu posredujejo senzorji.

Ker je takih izraÂ£unov pogosto zelo veliko, morajo inÂºenirji

poskrbeti za primerno zmogljivost sistema in optimizacijo algoritmov. Krmilni
sistem nadzoruje stroje in naprave v realnem Â£asu, torej si ne more privoÂ²Â£iti
poÂ£asne odzivnosti.

Podatke o stanju procesa mora dobiti hitro, jih v naj-

krajÂ²em moÂºnem Â£asu obdelati, se odloÂ£iti o nadaljnem poteku proizvodnega
procesa ter sporoÂ£iti ustreznim napravam ustrezna navodila.

Tudi zanesljivost delovanja je pri kontrolnih sistemih v industriji bistvenega
pomena. Pri uporabi veÂ£ine aplikacij s katerimi se sreÂ£ujemo pri vsakodnevnem
delu in zabavi, si naÂ£rtovalci programske opreme lahko privoÂ²Â£ijo obÂ£asne izpade delovanja. Kadar pride do napake sistema, uporabnik aplikacijo zaÂºene
znova in nato nadaljuje delo brez teÂºav.

Izpada kontrolnega sistema pa si

naÂ£rtovalci v industriji ne morejo privoÂ²Â£iti, saj je to pogosto povezano z
velikimi stroÂ²ki.

RaÂ£unalniÂ²ki sistemi velikokrat krmilijo tehnoloÂ²ke proce-

se, v katerih nastopajo nevarne in zdravju Â²kodljive snovi, zato je nemoteno
delovanje tu izjemnega pomena.

Industrijski kontrolni sistemi morajo tako

vsebovati varnostne mehanizme, ki ob morebitnem izpadu delovanja sistema
prepreÂ£ijo poÂ²kodbe ljudi in zmanjÂ²ajo ali prepreÂ£ijo gmotno Â²kodo.

1.2 Strojna oprema za nadzor naprav v industriji

5

1.2 Strojna oprema za nadzor naprav v industriji
Ker v industriji raÂ£unalniki delujejo v posebnih razmerah, zahteve glede stabilnosti delovanja in zmogljivosti pa so visoke, se je na tem podroÂ£ju uveljavila strojna oprema, posebej prilagojena zahtevam industrije.

Pomembna

naloga industrijskih nadzornih sistemov je povezati okolico (naprave, senzorje ipd.)

z delom kontrolnikov, ki izvajajo nadzorno logiko.

Âƒeprav obstaja

neÂ²teto raznovrstnih naprav, s katerimi lahko nadzorni sistem komunicira pa
komunikacija med njimi ponavadi poteka s pomoÂ£jo digitalnih in analognih
signalov. Na nadzorni sistem bi torej lahko gledali kot na Â£rno Â²katlo, ki pridobiva informacije od doloÂ£enega Â²tevila vhodnih signalov, informacije obdela in
jih nato posreduje okolju v obliki mnoÂºice izhodnih signalov. Ponavadi mora
delovati zelo hitro. Âƒe naprava pridobiva podatke o hitrosti vrtenja motorja,
ki kontrolira precizne procese in se mora odzivati v najkrajÂ²em moÂºnem Â£asu,
mora biti sposobna podatke ustreznih vhodnih signalov obdelati pravoÂ£asno
ter nastaviti vrednost ustreznih izhodnih kontrolnih signalov. Âƒasa za obdelavo
podatkov v tem primeru ni na pretek. Odzivnost naprave je izjemnega pomena
in ponavadi bistveno veÂ£ja, kot je to zahtevano od domaÂ£ih raÂ£unalnikov.
V industriji se za krmiljenje pogosto uporablja drugaÂ£ne naprave, kot so na
primer kontrolniki PLC (angl. Programmable Logic Controller) [1]. Za razliko
od obiÂ£ajnih raÂ£unalnikov je kontrolnik PLC naÂ£rtovan za prikljuÂ£itev veÂ£jega
Â²tevila vhodov in izhodov. Posebej je prilagojen delu v industrijskem okolju,
kjer lahko vladajo viÂ²je temperature, pojavljajo se lahko elektriÂ£ne motnje iz
okolja ter vibracije. TakÂ²ni kontrolniki so ponavadi razÂ²irljivi, po potrebi lahko
na njih prikljuÂ£imo dodatno Â²tevilo vhodov in izhodov. Stanje sistema, ki ga
nadzorujejo, lahko posredujejo drugim napravam, ki takÂ²ne podatke obdelujejo na razliÂ£ne naÂ£ine. Kontrolniki PLC so primerni za vzdrÂºevanje doloÂ£enega
stanja sistema neodvisno od ostalih delov sistema. Âƒe se komunikacija z ostalim delom sistema prekine, lahko vsak kontrolnik PLC Â²e naprej opravlja svoje
funkcije in tako ohranja naprave, ki jih upravlja, v Âºeljenem naÂ£inu delovanja.

1.3 SCADA
Kadar govorimo o sistemu SCADA (angl.

Supervisory Control And Data

Acquisition)[2], govorimo o sistemu, ki pokriva celoten spekter nadzora in kontrole nad procesom in napravami, ki v takem procesu sodelujejo. VeÂ£inoma se
to nanaÂ²a na kontrolo strojev in procesov v industriji ali na nadzor nad veÂ£jimi

Poglavje 1: Uvod

6

in kompleksnejÂ²imi napravami, kot so elektrarne, Â£istilne naprave, letaliÂ²Â£a ipd.
Sistemi, ki sodelujejo v industrijskih procesih in bi jih Âºeleli nadzorovati, so
razliÂ£nih dimenzij in kompleksnosti. Lahko govorimo o kontroli enega stroja,
ki obdeluje kovino, morda o tekstilni tovarni, kjer mnoÂºica avtomatiziranih
strojev proizvaja tkanino. Lahko pa govorimo o veÂ£ji geografski lokaciji, kjer
centralni nadzorni sistem kontrolira in zbira podatke o desetinah vetrnih elektrarn ter nadzornikom omogoÂ£a popolno kontrolo nad njihovim delovanjem ne
glede na to, kje se nadzorna oseba v nekem trenutku nahaja. Sistem SCADA
ponavadi sestavljajo vsaj naslednje osnovne komponente:

â€¢

vmesnik za povezavo Â£lovekstroj (angl.

Human Machine Interface 

HMI)

â€¢

kontrolniki naprav

â€¢

komunikacijska infrastruktura.

Komponente skupaj sestavljajo sistem, zmoÂºen nadzorovati Â²e tako zapleten
proces, ki bi bil brez takÂ²nega nadzora neobvladljiv

1.3.1

Vmesnik za povezavo Â£lovek-stroj

Vmesnik HMI [3] v sistemu SCADA predstavlja vez med napravami in Â£lovekom.
Z njegovo pomoÂ£jo so operaterjem na razumljiv naÂ£in predstavljeni podatki
o delovanju sistema.

Preko njega lahko operater prebere podatke o tlaku

v doloÂ£eni Â£rpalki, elektriÂ£ni napetosti v doloÂ£enem daljnovodu ali temperaturi peÂ£i za taljenje Âºeleza. Glede na predstavljene podatke lahko operaterji
sprejmejo odloÂ£itve o poteku procesa. Vmesniki HMI operaterjem poleg predstavitve sistemskih podatkov ponujajo interaktiven nadzor nad sistemom. Po
potrebi lahko z njim regulirajo pretoke razliÂ£nih snovi, odpirajo ali zapirajo
razliÂ£ne ventile, omogoÂ£eno jim je nastavljanje temperature razliÂ£nih peÂ£i ipd.
Dober vmesnik HMI operaterja pravoÂ£asno opozarja na morebitna kritiÂ£na
stanja in napake v sistemu. Âƒe doloÂ£ena sistemska spremenljivka (na primer
tlak v kotlu) preseÂºe svoje okvire, vmesnik HMI to jasno prikaÂºe, najpogosteje
v obliki alarma, kar omogoÂ£i operaterju, da se na dogodek ustrezno odzove
(na primer preko vmesnika HMI odpre ventil za zmanjÂ²anje tlaka v kotlu).
Prav tako Â²Â£iti sistem pred morebitnimi napakami uporabnika. PrepreÂ£i lahko
posredovanje napaÂ£nih vrednosti razliÂ£nih parametrov, ki bi sistem morebiti
lahko poÂ²kodovali (na primer morebitno nastavitev previsoke temperature, ki
bi povzroÂ£ila eksplozijo kotla).

1.3 SCADA

7

Izziv naÂ£rtovalcev vmesnikov HMI je predstaviti realno stanje kompleksnih
naprav na uporabniku razumljiv naÂ£in. Mnogokrat je zaÂºeljeno, da vmesnik
HMI prikazuje Â£imbolj realno stanje resniÂ£nega sistema. Tako so v vmesniku
poleg elementov, ki neposredno kontrolirajo obnaÂ²anje doloÂ£enih komponent
sistema (na primer ventilov), pogosto prikazane Â²e cevi, ki doloÂ£ene ventile
povezujejo. Prikazane so tudi komponente sistema, ki jih s pomoÂ£jo vmesnika HMI ne moremo kontrolirati, vendar je koristno vedeti, da na doloÂ£enem
delu naprave obstajajo (na primer zasilni ventili za roÂ£no sproÂ²Â£anje pritiska
v sistemu). Vse to sluÂºi namenu, da si operaterji, ki uporabljajo sistem, Â£im
laÂºje predstavljajo ziÂ£no napravo. Pri naÂ£rtovanju vmesnika HMI, je treba
upoÂ²tevati tudi morebitne razliÂ£ne vrste izobrazbe uporabnikov sistema. InÂºenirja, vajenega dela s kompleksnimi izraÂ£uni, morebiti zanimajo podrobni
parametri v procesu in Âºeli imeti Â£imveÂ£ji nadzor nad vsako najmanjÂ²o podrobnostjo sistema. Tehnologa, ki pregleduje ziÂ£no kondicijo sistema pa pri
uporabi vmesnika HMI morda zanima le, kako na Â£imbolj preprost naÂ£in hitro
odpreti ali zapreti doloÂ£en ventil med servisom doloÂ£enega dela sistema.
Vmesnik HMI mora biti posebej prilagojen delu v industrijskem okolju. V
nasprotju z delovnim okoljem obiÂ£ajnega uporabnika raÂ£unalnika, ki ima Â£as
raziskovati Â²tevilne funkcije sistema, je v industrijskem okolju zaÂºeljeno, da
je nepotrebnega klikanja Â£im manj.

Odzivnost na uporabnikove spremembe

mora biti hitra. NaÂ£in, s katerim so funkcije prikazane na vmesniku, naj bo
preprost in razumljiv. Tako je v okolju, kjer operaterji pri delu uporabljajo zaÂ²Â£itne rokavice, zaÂºeljeno, da uporabnik nastavlja doloÂ£ene parametre sistema
z uporabo velikih kontrol na zaslonu obÂ£utljivem na dotik. Precizno klikanje s
pomoÂ£jo raÂ£unalniÂ²ke miÂ²ke ali uporaba svetlobnega peresa je v industrijskem
okolju nezaÂºeljena.

1.3.2

Kontrolniki naprav

Zapletene sisteme sestavlja veliko Â²tevilo naprav, ki v njem zasedajo razliÂ£ne
vloge.

V industrijskih procesih uporabljamo od najpreprostejÂ²ih ventilov in

kontrolnikov pretoka, do bolj zapletenih naprav kot so specialne peÂ£i, struÂºnice
za obdelovanje kovin, razliÂ£nih senzorjev ipd.

Kadar Âºelimo naprave nad-

zorovati s pomoÂ£jo raÂ£unalniÂ²kih sistemov, moramo poskrbeti za vmesnik med
napravo in sistemom za nadzor naprave.
Kontrolnik, ki povezuje raÂ£unalniÂ²ki sistem in napravo, mora poskrbeti za
komunikacijo med njima.

RaÂ£unalniku mora omogoÂ£iti dostop do podatkov

naprave v digitalni obliki, podatke posredovane v digitalni obliki iz raÂ£unalnika pa posredovati napravi v obliki elektriÂ£nih signalov. Tako bi lahko pre-

Poglavje 1: Uvod

8

prost ventil s pomoÂ£jo kontrolnika nadzorovali tako, da bi raÂ£unalniÂ²ki sistem
kontrolniku posredoval digitalno vrednost 1 za odprtje ventila, kontrolnik pa bi
ventilu poslal signal v obliki elektriÂ£ne napetosti 24V, kar bi sporoÂ£ilu ventilu
naj se odpre.

V primeru, da bi raÂ£unalniÂ²ki sistem kontrolniku sporoÂ£il di-

gitalno vrednost 0, bi ventilu poslal signal v obliki elektriÂ£ne napetosti 10V,
kar bi pomenilo, da Âºelimo ventil zapreti. Na podoben naÂ£in in z razliÂ£nimi
kontrolniki lahko nadzorujemo stotine ali tisoÂ£e naprav v Â²e tako zapletenem
sistemu.
Nekateri deli sistema, Â²e posebej bolj zapleteni, morajo znotraj sistema
delovati z doloÂ£eno stopnjo avtonomije. Njihovo delovanje bi Âºeleli urejati z
bolj ali manj zapleteno logiko, ki bi lahko delovala neodvisno od sistema, ta
pa bi pridobival podatke o njenem delovanju in z doloÂ£enimi nastavitvami
urejal, na kakÂ²en naÂ£in naj se logika obnaÂ²a. V takÂ²nih primerih je smiselna
uporaba kontrolnikov PLC [1].

TakÂ²ni kontrolniki izvajajo svoj program in

poskrbijo za delovanje delov sistema, ki ga nadzorujejo.

Kontrolnikov PLC

je lahko v sistemu zelo veliko in vsak ureja toÂ£no doloÂ£eno podroÂ£je poteka
procesa. Podatke o delovanju lahko poÂ²iljajo svojim nadzornim sistemom, ki
jih zdruÂºujejo in posredujejo v ostale dele sistema SCADA, dokler niso podatki
na voljo operaterjem, ki uporabljajo vmesnik HMI.
Z zagotavljanjem avtonomnega delovanja delov sistema lahko poskrbimo
za dodaten nivo varnosti v sistemu.

Ob napaki v delu sistema, ki ga nad-

zoruje kontrolnik PLC s svojo logiko, bi kontrolnik ugotovil, da je priÂ²lo do
nepredvidenega dogodka in zaÂ£el izvajati varnostne postopke. Tako bi sistem
spravili v varno stanje.

Tudi Â£e bi se prekinila povezava do glavnega nad-

zornega sistema, bi lokalni kontrolnik varno upravljal napravo.

Ob ponovni

vzpostavitvi povezave z glavnim nadzornim sistemom pa bi se mu posredovali
podatki o naÂ£inu delovanja kontrolnika. Operater bi s pomoÂ£jo vmesnika HMI
ugotovil, da del sistema deluje v posebnem naÂ£inu in bi se na dogodek ustrezno
odzval. Z avtonomnim krmiljenjem delov sistema bi na tak naÂ£in vzpostavili
viÂ²jo stopnjo redundance in varnosti.

1.3.3

Komunikacijska infrastruktura

KljuÂ£ni lastnosti infrastrukture, ki skrbi za prenos podatkov med razliÂ£nimi
deli sistema SCADA, sta vsekakor hitrost in zanesljivost.

Skozi zgodovino

razvoja sistemov SCADA so njihovi proizvajalci uvedli razliÂ£ne komunikacijske protokole, prilagojene za industrijsko okolje [4]. Veliko teh protokolov je
sploÂ²no sprejetih, nekateri pa so standardizirani in jih podpira veÂ£ina veÂ£jih
razvijalcev sistemov SCADA. TakÂ²ni protokoli podpirajo izjemno hiter prenos

1.4 Pregled vsebine

9

podatkov in so prilagojeni okolju, kjer je pri izraÂ£unih in ravnanju s podatki
pomembna vsaka milisekunda.
Za povezave med razliÂ£nimi napravami in sistemi nekateri uporabljajo serijske povezave (RS-232, RS-485), uveljavile pa so se (in se uveljavljajo Â£edalje
bolj pogosto) tudi Ethernet povezave [5].
Nekateri proizvajalci sistemov SCADA so razvili aplikacije, ki omogoÂ£ajo
dostop do vmesnika HMI tudi preko interneta. Tako je operater nenehno obveÂ²Â£en o delovanju procesa, ki ga nadzoruje. Âƒe je zaradi narave upravljanega
procesa mogoÂ£e, lahko s pomoÂ£jo mreÂºnih vmesnikov operater doloÂ£ene dele
sistema upravlja neodvisno od svoje lokacije.

1.4 Pregled vsebine
Namen prvega poglavja je bralcu predstaviti pogled na svet industrijske avtomatike z vidika razvijalcev programske opreme.

Predstavljeni so osnovni

problemi, s katerimi se sreÂ£ujemo pri krmiljenju strojev in naprav. Predstavljene so osnove strojne opreme, prilagojene za industrijski svet in razloÂºeni
principi sistemov SCADA. Prvo poglavje bralca seznani z osnovami nadzora
in kontrole ter komunikacije med nadzornim sistemom in napravo, ki jo sistem
nadzira.
Drugo poglavje predstavi speciÂ£en pristop k reÂ²evanju problemov kontrolnih sistemov. Predstavljeno je okolje .NET za razvoj programske opreme. Z
njim je razvita programska oprema, ki skupaj s strojno opremo podjetja Beckho oblikuje zakljuÂ£en sistem za kontrolo strojev in proizvodnih procesov,
katerega del je tudi reÂ²itev opisana v tem diplomskem delu. Opisane so osnove
programske reÂ²itve, katere del je obravnavani programski modul.
Tretje poglavje podrobno opisuje razvito reÂ²itev za nadzor proizvodnega
procesa s pomoÂ£jo digitalne kamere. Opisana je uporabljena strojna oprema
in njene zmogljivosti.

Opisane so programske knjiÂºnice za upravljanje digi-

talne kamere ter principi postopka zajema slike za obdelavo.

Podrobno so

opisani deli programske reÂ²itve, razvite za delo s kamero, njena arhitektura
in komunikacija s preostalim delom aplikacije.

Opisani so tudi postopki za

programiranje po meri narejenih algoritmov za obdelavo slike in njihovo integracijo v sistem.
Âƒetrto poglavje predstavi uporabniku rezultate uporabe razvite programske
reÂ²itve v realnem proizvodnem okolju.
Peto poglavje obnovi bistveno vsebino diplomskega dela in obravnava moÂºnosti
za izboljÂ²anje razvite programske reÂ²itve.

Poglavje 2
Opis obstojeÂ£ega sistema
2.1 ObstojeÂ£a programska reÂ²itev
Razvit programski modul za nadzor procesa s kamero je integriran v aplikacijo
za nadzor in kontrolo industrijskih procesov.

Ta je primerna predvsem za

kontrolo bolj zapletenih postopkov, ki se hitro spreminjajo in od kontrolnega
sistema zahtevajo Â²tevilne prilagoditve. Aplikacija se uporablja za krmiljenje
procesa izdelave surovca za optiÂ£na vlakna [6], primerna pa je tudi za uporabo
v drugih industrijskih panogah. Postopek izdelave optiÂ£nih vlaken je zapleten
proces, pri katerem je treba v realnem Â£asu usklajevati komunikacijo med stotinami signalov in naprav. Naprave vkljuÂ£ujejo od preprostih ventilov in regulatorjev pretoka, stikal in pogonov motorjev, do naprav izdelanih po meri samo
za potrebe procesa, ki za krmiljenje zahtevajo zapleteno logiko. Aplikacija je
razvita v okolju .NET, podpora komunikaciji s kontrolnimi moduli razliÂ£nih
proizvajalcev pa omogoÂ£a enostavno razÂ²irljivost in prilagodljivost za delovanje
v razliÂ£nih okoljih. Skupaj s Â²iroko paleto krmilnikov in komunikacijskih modulov podjetja Beckho je odliÂ£en izbor za krmiljenje najrazliÂ£nejÂ²ih procesov,
ki so dovolj zapleteni, da je njihova raÂ£unalniÂ²ka kontrola smiselna.
Aplikacija ponuja uporabniku Â²iroko paleto funkcij za krmiljenje procesov:

â€¢

vsestranski vmesnik HMI za nadzor in kontrolo sistema v realnem Â£asu

â€¢

izvajanje zapletenih procesov v obliki receptov [7]

â€¢

povezljivost z krmilniki PLC in komunikacijskimi moduli razliÂ£nih proizvajalcev

â€¢

moÂ£na orodja za analizo stanja sistema, ki ga uporabnik nadzoruje

10

2.2 Opis problema

â€¢

11

varnostne mehanizme, ki med kontrolo procesa varujejo naprave in uporabnika

Sistem omogoÂ£a modularno vkljuÂ£evanje kontrolnih sistemov narejenih po meri
za krmiljenje specialnih naprav, ki sodelujejo v procesu. Kontrola za nadzor
procesa s pomoÂ£jo digitalne kamere je eden takÂ²nih modulov.

2.2 Opis problema
Proces izdelave surovca za optiÂ£na vlakna je zapleten in navadno traja tudi veÂ£
ur. Obdelovanec je podvrÂºen zaporedju obdelav, ki na razliÂ£ne naÂ£ine spreminjajo njegove lastnosti. Parametre naprav, ki sodelujejo pri obdelavi materiala,
je treba med procesom nenehno spremljati in prilagajati. Nekatere parametre
lahko prilagodimo na podlagi vizualnega izgleda obdelovanca ali njegovih delov med postopkom obdelave. V ta namen je smiselno razviti poseben modul,
ki s pomoÂ£jo digitalne kamere in razliÂ£nih algoritmov za obdelavo zajete slike
spremlja stanje obdelovanca med procesom.

Tako lahko bodisi avtomatsko

nadzira izbrane procesne parametre bodisi sluÂºi operaterju kot pomoÂ£ pri sprejemanju odloÂ£itev in mu omogoÂ£a roÂ£no prilagajanje procesnih spremenljivk.
Ker se proces zaradi prilagoditev spreminja, je pomembno, da je razviti modul
prilagodljiv.

Podpirati mora uporabo raznovrstnih algoritmov za obdelavo

slike in omogoÂ£ati vkljuÂ£evanje spremenljivega Â²tevila procesnih spremenljivk
v postopek delovanja modula. ReÂ²itev mora biti prilagodljiva do te mere, da
jo je mogoÂ£e uporabiti tudi za vizualni nadzor drugih proizvodnih procesov
(ob uporabi aplikacije, katerega del je razviti modul).

2.3 Okolje .NET
Pri naÂ£rtovanju novega programskega sistema se vedno pojavi vpraÂ²anje izbire
orodja za njegovo izdelavo. VÂ£asih je izbira enostavna, saj smo (predvsem v
zelo speciÂ£nih primerih) pri izbiri vezani na funkcionalnosti, ki jih doloÂ£eno
orodje ponuja. V veliki veÂ£ini primerov pa se nam ponuja pestra paleta orodij
in platform, izbira med njimi pa je vse prej kot lahka.
Programska okolja so se skozi zgodovino razvijala predvsem zaradi vpraÂ²anja, kako razvijalcem programske opreme omogoÂ£iti laÂºje (ter hitrejÂ²e in
poslediÂ£no cenejÂ²e) naÂ£rtovanje in izdelavo programske kode. Izbira okolja je
odvisna od Âºelja in potreb razvijalca. Nobene ovire ni, da se ne bi lotili pisanja
programskega sistema v zbirnem jeziku ali celo strojni kodi. TakÂ²na odloÂ£itev

Poglavje 2: Opis obstojeÂ£ega sistema

12

bi nam vsekakor pustila proste roke pri upravljanju z viri raÂ£unalnikov, na
katerem bi tekla naÂ²a programska oprema.

V tem primeru nihÂ£e ne bi mo-

gel oporekati hitrosti in uÂ£inkovitosti naÂ²e programske opreme  seveda pod
pogojem da bi bili naÂ²i algoritmi optimalni.

Vendar pa bi nas pri razvoju

najverjetneje ustavil pogled na ceno takÂ²nega razvoja, tako z vidika Â£asa kot
denarja.
V takÂ²nem primeru je vsekakor bolje izbrati bolj napredno programsko
okolje, ki namesto nas poskrbi za doloÂ£ene vidike razvoja programske opreme.
Gre predvsem za vidike, ki nas pri delu upoÂ£asnjujejo in poveÂ£ujejo moÂºnosti
napak. Pri izbiri se navadno sooÂ£amo z vpraÂ²anjem, koliko programerske svobode smo pripravljeni Âºrtvovati na raÂ£un hitrosti in udobja pri razvoju. Zanimiva moÂºnost izbire je Microsoftovo okolje .NET [8], ki je trenutno na voljo v
svoji 4. razliÂ£ici.
Okolje .NET poenostavlja razvoj programske opreme z abstrakcijo operacijskega sistema. Razvijalcem prihrani Â£as, ki bi ga drugaÂ£e porabili s prilagajanjem aplikacije operacijskemu sistemu in jim omogoÂ£a, da svoj Â£as namenijo
svoji programski opremi.

Okolje poskrbi za doloÂ£ena niÂºjenivojska opravila,

s katerimi bi se moral ukvarjati razvijalec, kar pripomore k hitrosti in uÂ£inkovitosti razvoja programske opreme. Pri velikem Â²tevilu razvojnih okolij se
mora razvijalec ukvarjati z alociranjem pomnilnika, kar je zamudno opravilo
in lahko vodi do hudih programskih napak, ki so mnogokrat teÂºko izsledljive.
V okolju .NET to ni problem, saj za ta opravila poskrbi namesto razvijalca.
Pri razvoju v razliÂ£nih okoljih se mnogokrat pojavlja pojem ponovnega
izumljanja neÂ£esa.

Kadar razvijalec pride do programske naloge (ponavadi

zelo nizkonivojske), lahko ugotovi, da bi mu pomagala doloÂ£ena avtomatizirana funkcija, ki pa je okolje, v katerem razvija, ne podpira.

V ta namen

se odloÂ£i razviti razne funkcije in metode, ki bi jih okolje moralo priskrbeti
Âºe samo po sebi.

Pri tem izgublja dragoceni Â£as.

Ker razvijalec te funkcije

le malokdaj razvije v obliki loÂ£ene knjiÂºnice, ki bi se dala vkljuÂ£iti v druge
aplikacije (ali pa zaradi razliÂ£nih razlogov teh knjiÂºnic ni dovoljeno vkljuÂ£iti
v ostale aplikacije), so omenjene funkcije ponavadi izgubljene, ko se razvijalec
loti dela na naslednji aplikaciji. V primeru, da uporablja isto orodje in naleti na
podoben programski izziv, se lahko loti ponovnega razvoja Âºe razvitih funkcij.
Pogosto se zgodi, da takÂ²ne funkcije probleme reÂ²ujejo na neoptimalen naÂ£in.
Okolje .NET s svojim Â²irokim naborom dobro preizkuÂ²enih knjiÂºnic poskrbi
za reÂ²itev takÂ²nih situacij. Nizkonivojsko programiranje naj bi bilo razvijalcu
prihranjeno, saj je zanj, bolj kot okolje v katerem razvija, pomembna aplikacija,
ki jo razvija.
Okolje .NET za uÂ£inkovitejÂ²i razvoj ponuja tudi Â²iroko paleto Âºe izdelanih

2.3 Okolje .NET

13

kontrol in reÂ²itev, s katerimi razvijalcu poenostavi razvoj aplikacij. Z uporabo
teh reÂ²itev (in Â£e je mogoÂ£e s prilagoditvijo svoje aplikacije tem reÂ²itvam),
lahko razvijalec v nekaj dneh ponudi stranki svojo reÂ²itev, katere razvoj bi
drugaÂ£e lahko trajal tedne. Seveda ima tako razvijalsko udobje svojo ceno.
Kritiki .NET okolja (in podobnih okolij) bi rekli, da je njihova slabost
ravno v poenostavitvi opravil uporabniku, saj razvijalec nima popolne kontrole nad nizkonivojskimi sistemskimi opravili. To neizogibno nekoliko podaljÂ²a
izvajalni Â£as aplikacije.

Vendar pa je Â£asovna potratnost sistema ponavadi

kritiÂ£na le na doloÂ£enih delih aplikacije. Ponavadi so takÂ²ni deli aplikacij specialni algoritmi za izvajanje speciÂ£ne naloge, ki je le del veÂ£jega programskega
paketa.

Postavlja se vpraÂ²anje, ali je vredno celotno aplikacijo zasnovati na

platformi, ki omogoÂ£a veÂ£ji nadzor nad sistemskimi viri uporabniku, vendar pa
je neprimerno bolj okorna za razvoj, zaradi nekaj manjÂ²ih (a vendar Â£asovno
kritiÂ£nih) delov sistema.
Mnogokrat razvijalec po podrobnem pregledu ugotovi, da reÂ²itve za njegove
programerske izzive ne zahtevajo direktne kontrole nad sistemskimi viri (torej
kontrole nad viri mimo nadzorovanega okolja). Kadar pa vseeno tak nadzor
potrebuje, okolje .NET zanj ponuja reÂ²itev.

Posamezne dele kode lahko na

poseben naÂ£in oznaÂ£i in dovoljeno mu je uporabiti naÂ£in dostopa do pomnilnika, kot smo jih vajeni pri nekaterih drugih programskih jezikih (in okoljih).
TakÂ²en primer so kazalci, s katerimi lahko neposredno manipulira s pomnilnikom. Vendar pa se mora v tem primeru razvijalec na doloÂ£enih delih kode
sooÂ£ati s problemi, ki so mu v nadzorovanem okolju prihranjeni (kot so problemi s pisanjem v zaÂ²Â£iten del pomnilnika ipd.).
Zaradi tega lahko reÂ£emo, da je okolje .NET prilagodljivo okolje za razvijalca, ki ga Â²Â£iti pred njegovimi napakami in mu olajÂ²a razvoj programske
opreme.

Prihrani mu ukvarjanje s podrobnostmi, ki so sicer za delovanje

njegove aplikacije nujne, vendar z vidika obnaÂ²anja aplikacije nepomembne.
Navsezadnje bi se moral razvijalec pri naÂ£rtovanju dobre aplikacije bolj ukvarjati z vpraÂ²anjem, kaj naj njegova aplikacija dela in ne z vpraÂ²anjem, kako naj
njegova aplikacija (na doloÂ£enem sistemu in v doloÂ£enem okolju) deluje.
V industrijskem svetu se za razvoj kontrolnih sistemov navadno uporabljajo
reÂ²itve, razvite v razliÂ£nih programskih jezikih. Veliko kontrolnih aplikacij pred
dobro uporabniÂ²ko izkuÂ²njo postavlja zanesljivost pri upravljanju procesa in
zmogljivost delovanja. Veliko aplikacij pa uporabniÂ²kemu vmesniku ne namenjajo takorekoÂ£ nikakrÂ²ne pozornosti, pomembno je samo, da je z njimi mogoÂ£e
opraviti zahtevano delo.

Tako so v industriji pogosto prisotne aplikacije, ki

leta opravljajo isti postopek, so neprilagodljive in imajo razvit le osnoven uporabniÂ²ki vmesnik. Okolje .NET je, zaradi Â²irokega nabora raznovrstnih kontrol

Poglavje 2: Opis obstojeÂ£ega sistema

14

in visoke prilagodljivosti, idealno orodje za razvoj aplikacij, od katerih se na
eni strani priÂ£akuje dobro uporabniÂ²ko izkuÂ²njo ter zmogljivost in zanesljivost
delovanja na drugi strani.

2.4 Krmilniki Beckho
ObstojeÂ£a reÂ²itev za povezavo z napravami, ki jih krmili, podpira uporabo
strojne opreme razliÂ£nih proizvajalcev.

Od vsakega proizvajalca posebej je

odvisno na kakÂ²en naÂ£in njihove reÂ²itve podpirajo uporabo razvojnih okolij.
Nekateri med njimi za povezavo z njihovo strojno opremo priskrbijo samo
osnovne knjiÂºnice (ponavadi napisane v programskem jeziku C / C++). Drugi
poleg tega ponujajo Â²e raznovrstne programske knjiÂºnice za krmiljenje njihove
opreme z uporabo razvojnih okolij kot so .NET, Java ipd. Kadar Âºelimo pri
razvoju uporabiti okolje .NET, se je za dobro reÂ²itev izkazala strojna oprema
proizvajalca Beckho.
Podjetje Beckho se na podroÂ£ju avtomatizacije usmerja veÂ£inoma v reÂ²itve,
ki delujejo s pomoÂ£jo osebnih raÂ£unalnikov (PC-based control).

V svetu o-

sebnih raÂ£unalnikov je bila dolgo Â£asa kontrola procesov, ki pri avtomatizaciji zahtevajo hitro odzivnost in visoko stopnjo zanesljivosti nadzornega sistema, nepredstavljiva.

Osebni raÂ£unalniki so veljali za relativno nestabilen

sistem, ki ni sposoben daljÂ²e Â£asovno obdobje neprekinjeno krmiliti proizvodnega procesa. Do takÂ²nega slovesa so jim nekoliko pomagale sploÂ²no znane
teÂºave operacijskih sistemov.

Tudi dejstvo, da so bile strojne komponente

osebnega raÂ£unalnika med seboj dobro zdruÂºljive bolj v teoriji kot v praksi
(in to je poslediÂ£no vplivalo na stabilnost sistema), osebnim raÂ£unalnikom ni
pomagalo pri slovesu v svetu industrije. Z razvojem osebnih raÂ£unalnikov in
mreÂºne tehnologije pa se je poÂ£asi spremenilo tudi to prepriÂ£anje in danes osebni raÂ£unalniki Â£edalje bolj pridobivajo na slovesu tudi v svetu industrijske
avtomatike.

Podjetje Beckho je, z raznovrstno strojno opremo za razliÂ£ne

namene krmiljenja in avtomatizacije procesov, eno izmed vodilnih podjetij na
tem podroÂ£ju [9]. Osebne raÂ£unalnike z industrijskimi krmilniki povezuje njihova programska oprema TwinCat [10], ki z implementacijo komunikacijskih
protokolov, primernih za industrijo, poskrbi za dovolj hitro in robustno komunikacijo med osebnim raÂ£unalnikom in industrijskim okoljem.
Beckho ponuja razvijalcem dobro vzdrÂºevane programske knjiÂºnice za
povezavo z njihovim sistemom tudi za okolje .NET. Razvijalci lahko z njimi na
preprost naÂ£in dostopajo do funkcij sistema TwinCat, ki vzdrÂºuje komunikacijo
med razliÂ£nimi moÂºnimi arhitekturami kontrolnikov sistemov v industrijskem

2.4 Krmilniki Beckho

15

okolju. Integracija z razliÂ£nimi programskimi moduli, narejenimi po meri, je
zato preprosta.

KnjiÂºnice poskrbijo za komunikacijo med razliÂ£nimi moduli

in sistemom TwinCat, ta pa podatke posreduje do kontrolnih modulov, ki jih
nadzoruje.

Poglavje 3
Programski modul za nadzor
procesa z digitalno kamero
V skladu s koncepti obstojeÂ£e aplikacije sem izdelal programski modul, ki
omogoÂ£a nadzor procesov z digitalno kamero.

Ta modulu med delovanjem

poÂ²ilja sliko produkta v izdelavi, modul pa s temi podatki in uporabo razliÂ£nih
algoritmov v realnem Â£asu raÂ£una razliÂ£ne parametre, pomembne za krmiljenje procesa. Nekateri izraÂ£unani parametri so na voljo sistemu za krmiljenje
in nadzor procesa, nekateri pa tudi operaterju sistema v pomoÂ£ pri morebitnem
roÂ£nem posredovanju med izdelavo produkta.

3.1 Kamera za nadzor procesa
Pri naÂ£rtovanju reÂ²itve sem uporabil digitalno kamero podjetja ImagingSource,
model DMK 31AG03.I (slika 3.1). Osnovna specikacija kamere je podana v
tabeli 3.1 [11].

Slika 3.1: Kamera DMx 31AG03.I

16

3.1 Kamera za nadzor procesa

17

LoÂ£ljivost:

1024Ã—768

Barvni formati:

Y800, RGB8

Hitrost zajemanja slike:

do 30 slik na sekundo

Dimenzije:

viÂ²ina: 50,6mm, Â²irina: 50,6mm, dolÂºina: 50mm
Tabela 3.1: Specikacije kamere

Kamera podpira zajem izkljuÂ£no Â£rno-belih slik, vendar barve pri ugotavljanju parametrov, ki jih potrebujemo za proces izdelave surovcev optiÂ£nih vlaken,
niso relevantne. Pomembna lastnost naprave je sposobnost avtomatskega kontroliranja zaslonke in to je tudi eden od razlogov, zakaj je bila za potrebe
procesa izbrana prav ta kamera.
Kamero prikljuÂ£imo na raÂ£unalnik preko gigabitnega ethernet omreÂºja. Za
programsko kontrolo naprave so v veÂ£ programskih jezikih na voljo napravi
priloÂºene knjiÂºnice IC Imaging Control.

Aplikacija, katere del je kontrola

kamere, je napisana v jeziku C# in ker so kontrolne knjiÂºnice za kamero na
voljo tudi v okolju .NET, so logiÂ£na izbira za to programsko reÂ²itev.

3.1.1

Barvni formati kamere

V raÂ£unalniÂ²kem svetu predstavljamo podatke digitalno. Podatki, ki jih kamera zajema in poÂ²ilja sistemu, na katerega je prikljuÂ£ena, morajo biti v digitalni
obliki.

Tudi podatki o barvah niso izjema.

Kakor so pomembne dimenzije,

v katerih se slika poÂ²ilja sistemu, tako je treba za obdelavo slike vedeti, v
kakÂ²nem formatu se sistemu posreduje informacija o barvah. Kamera, ki sem
jo uporabil pri izdelavi reÂ²itve ne podpira zajema barvnih slik. Podatke o barvah (odtenkih sivine) poÂ²ilja v enem izmed dveh formatov: RGB8 ali Y800.

3.1.1.1

Format RGB

V formatu RGB [12] je vsaka barva podana z doloÂ£itvijo Â²tevilskih vrendosti
njenih komponent. Vsako barvo, predstavljeno v tem formatu, se da doloÂ£iti
kot seÂ²tevek vrednosti, ki predstavljajo njeno rdeÂ£o (R), zeleno (G) in modro
(B) komponento. Âƒe imajo vse komponente vrednost 0, je predstavljena barva
Â£rna, v primeru, da imajo vse komponente maksimalno vrednost, pa je barva
bela. Â’tevilo barv, ki jih lahko predstavimo je odvisno od Â²tevila bitov, ki jih
pri doloÂ£eni predstavitvi uporabimo za vsako barvno komponento.
Nekateri sistemi (tudi sistem, v katerega je integrirana reÂ²itev s kamero),
predstavljajo barve v 32-bitnem formatu RGBA (slika 3.2 [13]).

Format u-

porablja po 8 bitov za predstavitev vsake barvne komponente in ostalih 8

Poglavje 3: Programski modul za nadzor procesa z digitalno kamero

18

bitov za predstavitev transparentnosti. Transparentnost (alfa) je ponazorjena
z 8 biti tako, da vrednost 0 pomeni popolno transparentnost (torej je slikovni
element neviden), maksimalna vrednost pa pomeni popolno netransparentnost
slikovnega elementa.

Slika 3.2: 32-bitna RGBA predstavitev barve

3.1.1.2

Monokromatski RGB8 format

V sistemih, kjer zajemanje barvnih slik ni podprto, se vÂ£asih odloÂ£imo za
predstavitev sivin v monokromatskem RGB8 formatu.

Namesto komponent

za rdeÂ£o, zeleno in modro, v tem primeru 8 bitov opisuje 256 moÂºnih intenzitet
sivin. Sliko tako sestavljajo samo slikovni elementi z razliÂ£nimi odtenki sive
barve.

3.1.1.3

Format YUV

Ta format za predstavitev barv uporablja nekoliko drugaÂ£en sistem kot format
RGB. Tudi YUV format uporablja 3 vrednosti za doloÂ£itev barve. Vrednost
Y doloÂ£a svetlost barve, dobimo pa jo s seÂ²tevkom obteÂºenih vrednosti R, G
in B. Uporabljene uteÂºi so lahko razliÂ£ne, vendar se v modernejÂ²ih formatih
uporablja formula:

Y = 0, 2125R + 0, 7154G + 0, 0721B
Vrednosti U in V v formatu doloÂ£ata barvo, dobi pa se ju z uporabo formul:

U =Bâˆ’Y
V =Râˆ’Y
Zgodovinsko je format tesno povezan z razvojem televizije.

S pojavom

barvnih televizij so se razvijalci sooÂ£ili s problemom, kako zakodirati podatke
o barvah, s tem da bi obstojeÂ£i Â£rno-beli televizorji Â²e vedno normalno predvajali sliko.

Komponenti Y so dodali Â²e barvni komponenti U in V. Barvni

televizorji so sposobni barvni komponenti, skupaj s komponento Y, dekodirati
in pretvoriti v RGB signal.
Kadar konvertiramo digitalni video, pri raÂ£unanju ponavadi skaliramo vrednosti YUV komponent tako, da ima komponenta Y vrednosti v razponu
16-235, komponenti U in V pa vrednosti v razponu 16-240.

Vrednost 128

v primeru U in V predstavlja izhodiÂ²Â£e. Âƒrna barva bi bila tako predstavljena
z YUV vrednostmi (16, 128, 128), bela barva pa z vrednostmi (235, 128, 128).

3.2 Osnovni koncepti delovanja naprave

3.1.1.4

19

Format Y800

Format Y800, uporabljen pri konvertiranju kamerine slike, je preprosta oblika
YUV formata, ki pri prezentaciji ne uporablja barvnih komponent (komponent
U in V). Podobno kot pri monokromatskem RGB8 formatu, sliko sestavljajo
slikovni elementi razliÂ£nih intenzitet sivin, le da so v primeru kodiranja s formatom Y800 predstavljene le s komponento Y. Ker kamera prednastavljeno
predstavlja sliko v tem formatu, sem ga pri implementaciji modula uporabil
tudi jaz.

3.2 Osnovni koncepti delovanja naprave
KnjiÂºnica za delo z omenjeno kamero je zasnovana tako, da na Â£imbolj preprost naÂ£in razvijalcu omogoÂ£i zajem kamerine slike in njeno manipulacijo.
Ob nakupu naprave dobimo priloÂºeno tudi knjiÂºnico za delo z njo. Tako lahko
uporabnik zlahka izkoristi zmogljivosti naprave, ki jo uporablja. KnjiÂºnica tako
omogoÂ£a operacije nad slikovnimi elementi zajete slike za potrebe razliÂ£nih algoritmov, kot tudi nekatere priroÂ£ne moÂºnosti kot so pribliÂºevanje in pomik
slike.
Slika 3.3 prikazuje postopek zajema slike z uporabljeno kamero. Slike, ki
jih zajema naprava, lahko ponazorimo kot tok podatkov. Ta teÂ£e od izvora 
naprave, ki podatke zajema, do ponora  sistema, ki podatke potrebuje. Ker je
podatke priroÂ£no obdelovati loÂ£eno za potrebe prikaza in potrebe algoritmov
za obdelavo slike, je podatkovni tok mogoÂ£e razdeliti na dva dela. To sta del za
prikazovanje podatkov in del za obdelavo podatkov. Oba dela podatkovnega
toka sta identiÂ£na, saj gre v bistvu za isti podatkovni tok, ki potuje v razliÂ£ne
smeri. Âƒe torej uporabimo nespremenjen podatkovni tok za prikaz podatkov in
za obdelavo podatkov, potem sistem obdeluje toÂ£no tako sliko, kot je prikazana
na uporabnikovem zaslonu.
PriroÂ£nost takÂ²ne razdelitve se pokaÂºe v primeru, da Âºelimo uporabniku
prikazati nekoliko spremenjene podatke, kot jih obdeluje algoritem.

Zaradi

deljenega podatkovnega toka lahko dodajamo razliÂ£ne ltre [14] za obdelavo
slik na del podatkovnega toka namenjenega prikazu slike in del podatkovnega
toka, namenjenega obdelavi podatkov z algoritmi (ponor). TakÂ²en naÂ£in obdelave podatkov nam omogoÂ£a preprosto dodajanje graÂ£nih elementov na
prikazovalni del, ki pa zaradi deljenosti podatkovnega toka ne moti algoritmov
pri izraÂ£unavanju parametrov. Kadar Âºelimo ltrirati podatke za oba dela podatkovnega toka, lahko dodajamo ltre na osnovni podatkovni tok, ki poteka
iz naprave.

20

Poglavje 3: Programski modul za nadzor procesa z digitalno kamero

Slika 3.3: Arhitektura modula za zajemanje in obdelavo slike

Vsako udobje pri razvijanju sistemov zahteva svoje sistemske vire. Vendar
pa nam prilagodljivost obdelave podatkov omogoÂ£a dober nadzor nad dodatno
porabo leteh. Arhitektura sistema, ki uporablja deljen podatkovni tok, nam
ponuja razliÂ£ne moÂºnosti tudi pri varÂ£evanju z razpoloÂºljivimi zmogljivostmi
sistema. Âƒe Âºelimo optimizirati performanse, lahko na preprost naÂ£in ugasnemo prikazovalnik ali razliÂ£ne graÂ£ne elemente, ki jih morebiti dodajamo na podatkovni tok, speljan v prikazovalnik podatkov. Optimizacijo se da doseÂ£i tudi
z racionalnim postavljanjem ltrov podatkov na podatkovnemu toku. Seveda
pa je vpraÂ²anje, ali nam aplikacija, ki jo razvijamo to dopuÂ²Â£a.
Pri naÂ£rtovanju sistema je treba previdno razmisliti o vseh pomembnejÂ²ih
funkcionalnostih (Â²e posebej zahtevnih s staliÂ²Â£a porabe sistemskih virov). Âƒe
ugotovimo, da se nam obdelava podatkov za namen doloÂ£ene funkcionalnosti
bolj izplaÂ£a na nivoju kamere, jo bomo, raje kot na nivoju aplikacije, vklopili na
nivoju same naprave. S previdnim naÂ£rtovanjem lahko tako obdrÂºimo eleganco
in preprostost pri razvoju, ki nam jo omogoÂ£a knjiÂºnica za delo s kamero, ne
da bi se zato odpovedali dobrim performansem sistema, ki ga razvijamo.

3.3 Programska reÂ²itev kontrole s kamero

21

3.3 Programska reÂ²itev kontrole s kamero
Z vidika uporabnika je modul kamere razdeljen na dva dela:

â€¢

kontrolnik SCADA

â€¢

glavno okno kamere.

3.3.1

Kontrolnik SCADA

Razvit modul kamere je integriran v sistem SCADA in tako del veÂ£je sistemske
reÂ²itve (glej 3.5).

Vmesnik HMI omogoÂ£a vizualen prikaz kamere na shemi

celotnega sistema, z njegovo pomoÂ£jo pa lahko uporabnik dostopa do prikaza
glavnega okna kamere.

Kontrolnik je navidez sestavljen samo iz graÂ£nega

dela, ki prikazuje kamero in gumba, s katerim dostopamo do glavnega okna
kamere.

Vendar lahko uporabnik s pomoÂ£jo kontrolnikovih nastavitev poleg

izgleda nastavlja Â²e nekatere druge parametre, ki so nujni za delovanje kamere,
niso pa spremenljivi med samim delovanjem sistema.

Kontrolnik kamere,

vkljuÂ£en v celotno shemo SCADA, predstavlja naslednji opis XML:

<ScadaObject xsi:type="IcImagingDevice" height=""
Identifier=""zindex="" x="" y="" width="">
<Description></Description>
<BackgroundColor></BackgroundColor>
<BorderSize></BorderSize>
<BorderStyle></BorderStyle>
<BorderColor></BorderColor>
<ExecutionOrder></ExecutionOrder>
<ManualOverride></ManualOverride>
<Name></Name>
<Visible></Visible>
<AutoIrisOffset></AutoIrisOffset>
<MaxExposure></MaxExposure>
<BackgroundImage></BackgroundImage>
<DeviceName></DeviceName>
<FilterName></FilterName>
<FilterParameters></FilterParameters>
<FlipHorizontal></FlipHorizontal>
<FlipHorizontalDisplay></FlipHorizontalDisplay>
<AutoMaxExposure></AutoMaxExposure>

Poglavje 3: Programski modul za nadzor procesa z digitalno kamero

22

<FlipVertical></FlipVertical>
<FlipVerticalDisplay></FlipVerticalDisplay>
<FrameRate></FrameRate>
<ImageFormat></ImageFormat>
<InputNames></InputNames>
<LicenceKey></LicenceKey>
<ROIHeight></ROIHeight>
<ROIWidth></ROIWidth>
<Rotation></Rotation>
<RotationDisplay></RotationDisplay>
<ShowSerialNumber></ShowSerialNumber>
</ScadaObject>
z opisa lahko razberemo nekatere nastavljive lastnosti, ki so posredovane sistemu preko kontrolnika SCADA. Njegove lastnosti lahko razdelimo na dva dela.
Nekatere doloÂ£ajo sploÂ²en izgled in obnaÂ²anje kontrolnika, z nekaterimi pa
uporabnik doloÂ£a bolj precizno obnaÂ²anje kamere ali algoritmov, ki obdelujejo
njeno sliko.

Lastnost Description
Uporabniku prijazen opis naprave, ki ponavadi vsebuje bolj podrobne informacije o napravi. To je Â²e posebej uporabno, kadar imamo veÂ£ naprav istega tipa
in Âºelimo uporabniku ponuditi dodatne podatke o speciÂ£ni instanci naprave.

Lastnost BackgroundColor
Lastnost doloÂ£a barvo ozadja naprave, prikazane v vmesniku HMI. Podana je
v formatu RGBA, pri Â£emer so vrednosti loÂ£ene z vejicami.

Lastnost BorderSize
Lastnost doloÂ£a Â²irino okvirja kontrolnika SCADA, kot je prikazan uporabniku
v vmesniku HMI. Vrednost je podana v slikovnih elementih.

Lastnost BorderStyle
Uporabnik s to lastnostjo doloÂ£a stil okvirja, ki omejuje kontrolnik SCADA.

3.3 Programska reÂ²itev kontrole s kamero

23

Lastnost BorderColor
Lastnost doloÂ£a barvo okvirja kontrolnika SCADA.

Lastnost ExecutionOrder
Lastnost doloÂ£a vrstni red, po katerem glavna aplikacija preraÂ£unava vrednosti
algoritmov naprav. Lastnost je uporabna v sklopu integracije modula v glavno
aplikacijo.

Lastnost ManualOverride
DoloÂ£a, ali je po zagonu sistema uporabniku dovoljena interakcija s kontrolnikom SCADA. S tem parametrom lahko uporabniku med delovanjem sistema
prepreÂ£imo uporabo naprave.

Lastnost Name
Uporabniku prijazno ime naprave, ki se uporablja za identikacijo na vmesniku
HMI.

Lastnost Visible
DoloÂ£a vidnost kontrolnika SCADA uporabniku.

Lastnost BackgroundImage
Lastnost doloÂ£a pot do morebitne slike, ki naj se prikaÂºe v ozadju kontrolnika
SCADA na vmesniku HMI.

Lastnost AutoIrisOset
Odpiranje in zapiranje zaslonke kamere se kontrolira s poÂ²iljanjem signala
doloÂ£ene frekvence napravi. Ta frekvenca se od naprave do naprave razlikuje.
S pomoÂ£jo te lastnosti se kalibrira ksno toÂ£ko, pri kateri se zaslonka ne odpira
niti ne zapira. V naÂ²em primeru je vrednost tega parametra 0.

Lastnost MaxExposure
Parameter nastavlja maksimalno vrednost hitrosti zaslonke kamere. SluÂºi kot
varovalka, ki prepreÂ£uje, da bi se v izraÂ£un posredovali dve enaki sliki.

24

Poglavje 3: Programski modul za nadzor procesa z digitalno kamero

Lastnost AutoMaxExposure
Lastnost ureja vklop avtomatskega prilagajanja parametra izpostavljenosti
svetlobi pri zajemu slike na doloÂ£eno hitrost zajema slike sistema tako, da
se pri tem hitrost poÂ²iljanja slike ne zmanjÂ²a.

Âƒe uporabnik nastavi viÂ²jo

hitrost poÂ²iljanja slike, bo funkcija AutoMaxExposure parameter MaxExposure nastavila na doloÂ£eno vrednost, Â£e bo uporabnik hitrost zmanjÂ²al, bo ta
funkcija parameter MaxExposure poveÂ£ala.

Lastnost DeviceName
Lastnost doloÂ£a model kamere, s pomoÂ£jo katerega se sistem poveÂºe na napravo.
Veljavne vrednosti te lastnosti doloÂ£a proizvajalec kamere.

Lastnost FilterName
S to lastnostjo podajamo ime algoritma, ki ga Âºelimo uporabljati pri obdelavi
slike, pridobljene iz naprave. To nam omogoÂ£a uporabo razliÂ£nih algoritmov
za obdelavo slike.

Veljavna vrednost lastnosti je odvisna od implementacije

algoritma v programski kodi in mora ustrezati specikacijam posameznega
algoritma.

Lastnost FilterParameters
Nastavitev se uporablja za posredovanje posebnih parametrov algoritmom za
obdelavo slike. Podobno kot pri imenu algoritma, mora nabor nastavitev ustrezati specikacijam posameznega algoritma.

Lastnost FlipHorizontal
Lastnost sporoÂ£a algoritmom kamere, ali naj pred obdelavo sliko obrnejo po
horizontali. Zrcaljenje poteka samo za potrebe algoritma, na prikazno sliko ta
nastavitev ne vpliva.

Lastnost FlipVertical
OmogoÂ£a zrcaljenje slike po vertikali. Zrcaljenje poteka samo za potrebe algoritma, na prikazno sliko ta nastavitev ne vpliva.

3.3 Programska reÂ²itev kontrole s kamero

25

Lastnost FlipHorizontalDisplay
Lastnost se uporablja za morebitno obrnitev slike na prikazovalnem delu kamere.
To je uporabno Â²e posebno v primeru, ko bi radi le rotirali prikaz slike, ne pa
tudi slike same (zaradi obnaÂ²anja algoritmov, ki sliko obdelujejo). Zrcaljenje
poteka samo za potrebe prikazne slike, na izvajanje algoritma to zrcaljenje ne
vpliva.

Lastnost FlipVerticalDisplay
OmogoÂ£a zrcaljenje slike po vertikali.

Zrcaljenje poteka samo za potrebe

prikazne slike, na izvajanje algoritma to zrcaljenje ne vpliva.

Lastnost FrameRate
S pomoÂ£jo te nastavitve lahko uporabnik nastavlja Â²tevilo sliÂ£ic, ki jih v
sekundi zajame kamera in poÂ²lje v sistem.

VeÂ£ja kot je vrednost paramet-

ra, bolj tekoÂ£a je slika, vendar to bolj obremeni sistem. Pri uporabi kamere
na sistemih z manj zmogljivimi procesorji je smiselno zmanjÂ²ati vrednost te
lastnosti. Pri opisani reÂ²itvi je uporabljena maksimalna hitrost zajema slike,
ki ga podpira kamera, to je 30 sliÂ£ic na sekundo.

Lastnost ImageFormat
Lastnost doloÂ£a format, v katerem so zajete slike posredovane sistemu. Trenutno
je podprta samo moÂºnost uporabe formata Y800.

Lastnost InputNames
Lastnost je namenjena doloÂ£anju posebnih generiÂ£nih vhodnih parametrov v
napravo. Uporabnik lahko doloÂ£i maksimalno 10 posebnih vhodnih parametrov.
Za vsak parameter, kateremu uporabnik poda ime (imena so med seboj loÂ£ena
z znakom ';' ), sistem generira uporabniÂ²ki vmesnik na glavnem oknu kamere.
Vrednost lastnosti lahko vsebuje tudi prazne vnose, s katerimi lahko uporabnik
preskoÂ£i vhodne parametre, ki jih ne Âºeli prikazati na uporabniÂ²kem vmesniku.
Primer: Âƒe Âºeli uporabnik od desetih moÂºnih vhodnih parametrov v glavnem
oknu kamere prikazati 1., 4.

in 5., potem lahko to stori tako, da nastavi

vrednost lastnosti InputNames na naslednji naÂ£in:

Input0;;;;Input4;Input5.

Tip gradnika se doloÂ£i glede na tip signala, ki je prikljuÂ£en na doloÂ£en vhod
modula (glej poglavje 3.5 in 3.4).

Âƒe je na vhod prikljuÂ£en digitalni signal,

bo modul generiral gradnik za doloÂ£anje digitalnih vrednosti (polje za izbiro

26

Poglavje 3: Programski modul za nadzor procesa z digitalno kamero

s kljukico), Â£e pa je prikljuÂ£en signal analogen, bo modul generiral drsnik
in vnosno polje, s katerim bo uporabnik lahko nastavljal analogne vrednosti.
Razpon vrednosti na drsniku so doloÂ£ene glede na minimalno in maksimalno
vrednost prikljuÂ£enega signala.

Lastnost LicenceKey
S to lastnostjo uporabnik poda licenÂ£ni kljuÂ£ za uporabo kontrolnih knjiÂºnic
kamere. LicenÂ£ni kljuÂ£ je priloÂºen vsaki napravi posebej. Kontrolne knjiÂºnice
so navadno vkljuÂ£ene v ceno kamere. Uporabljena kamera skupaj s kontrolnimi
knjiÂºnicami stane 670 EUR.

Lastnost ROIHeight
Lastnost doloÂ£a viÂ²ino interesnega obmoÂ£ja kamere.

Vrednost je podana v

Â²tevilu slikovnih elementov.

Lastnost ROIWidth
Lastnost doloÂ£a Â²irino interesnega obmoÂ£ja kamere.

Vrednost je podana v

Â²tevilu slikovnih elementov.

Lastnost Rotation
S to lastnostjo lahko rotiramo sliko, poslano iz kamere, za potrebe algoritma.
Lastnost ne vpliva na prikazno sliko, marveÂ£ samo na sliko poslano algoritmu.
MoÂºna je rotacija za 90, 180 in 270 stopinj. Veljavne vrednosti lastnosti so:
None, Deg90, Deg180, Deg270.

Lastnost RotationDisplay
Lastnost deluje podobno kot lastnost Rotation, le da v tem primeru rotira sliko
za potrebe prikazovalnika. Lastnost ne vpliva na sliko poslano algoritmu.

Lastnost ShowSerialNumber
Uporabnik lahko s to lastnostjo doloÂ£i, ali naj se na kontrolniku SCADA
prikaÂºe serijska Â²tevilka kamere. To je uporabno za namen hitre identikacije
naprav na vmesniku HMI.

3.3 Programska reÂ²itev kontrole s kamero

3.3.2

27

Glavno okno kamere

Glavno okno kamere sem razdelil na pet delov:

â€¢

glavni meni (segment D na sliki 3.4)

â€¢

nastavljanje interesnega obmoÂ£ja (segment A na sliki 3.4)

â€¢

nastavljanje parametrov slike (segment B na sliki 3.4)

â€¢

nastavljanje generiÂ£nih vhodnih parametrov (segment C na sliki 3.4)

â€¢

prikaz slike (segment E na sliki 3.4).

Slika 3.4: Glavno okno kamere

3.3.2.1

Glavni meni

Glavni meni sestavljajo naslednji gradniki:

Gumb Show live video
S to opcijo lahko uporabnik prikaÂºe ali skrije prikazovanje slike, poslane iz
kamere. V primeru, da je slika skrita, algoritem v ozadju Â²e vedno preraÂ£unava
njene parametre. Opcija je uporabna predvsem v primeru, ko Âºelimo zaÂ£asno

Poglavje 3: Programski modul za nadzor procesa z digitalno kamero

28

izboljÂ²ati performance sistema na raÂ£un izklopa prikaza slike, hkrati pa imeti
odprto okno za nastavljanje njenih parametrov.

Gumb Show overlay
Ta opcija uporabniku omogoÂ£a vklop in izklop prikaza graÂ£nih elementov
slike.

Na sliki, ki jo kamera poÂ²ilja, graÂ£ni elementi oznaÂ£ujejo pomembne

dele, kot so robovi in interesna obmoÂ£ja.

Izbirni menu Zoom
S pomoÂ£jo te opcije lahko uporabnik poveÂ£uje, ali pomanjÂ²uje prikazno sliko.
Uporabnik lahko izbira veÂ£ obmoÂ£ij do maksimalnega poveÂ£anja slike na 200%
originalne vrednosti, ali do minimalnega obmoÂ£ja 25% originalne velikosti slike.

Gumb Enable processing
Gumb deluje kot stikalo in v primeru, da je vklopljen, omogoÂ£i aplikaciji izvajanje algoritma za obdelavo slike. V primeru, da je opcija izklopljena, aplikacija
preskoÂ£i izraÂ£unavanje parametrov, ki jih aplikacija pridobiva s pomoÂ£jo zajete
slike.

Gumb Enable camera
S pomoÂ£jo tega gumba lahko uporabnik popolnoma izklopi delovanje kamere.
V tem primeru se izklopi tako zajem in poÂ²iljanje slike aplikaciji, kot tudi
izraÂ£unavanje parametrov.

3.3.2.2

Nastavljanje interesnega obmoÂ£ja

UporabniÂ²ki vmesnik za nastavljanje interesnega obmoÂ£ja sestavljata dve kontroli, sestavljeni iz drsnika s pripadajoÂ£im vnosnim poljem (slika 3.4). Z njuno
pomoÂ£jo lahko uporabnik nastavlja pozicijo interesnega obmoÂ£ja. Kontroli se
imenujeta Top in Left. Prva premika pozicijo zgornjega levega kota interesnega obmoÂ£ja v koordinatnem sistemu po osi Y, druga po osi X.
Â’irino in viÂ²ino denicijskega obmoÂ£ja lahko uporabnik nastavlja v nastavitvah kontrolnika SCADA kot lastnosti naprave (glej poglavje 3.3.1). Parametra sta nastavljiva samo med ustavljenim stanjem sistema. To je nujno, ker
nastavljanje parametrov slike, ki doloÂ£ata viÂ²ino in Â²irino interesnega obmoÂ£ja,
vplivata na format videa, ki ga zajema kamera. Format videa se med poÂ²iljanjem slike aplikaciji ne sme spreminjati. Omenjena parametra vplivata tudi

3.3 Programska reÂ²itev kontrole s kamero

29

na denicijsko obmoÂ£je vrednosti, nastavljivima s kontrolama za premikanje
pozicije. Kontrola Top ima denicijsko obmoÂ£je od 0 do 767 slikovnih elementov  viÂ²ina interesnega obmoÂ£ja, kontrola Left pa denicijsko obmoÂ£je
od 0 do 1023 slikovnih elementov  Â²irina interesnega obmoÂ£ja, pri Â£emer pa
so na voljo samo vrednosti v tem obmoÂ£ju, ki so deljive z 8.

3.3.2.3

Nastavljanje lastnosti slike

S pomoÂ£jo tega dela uporabniÂ²kega vmesnika lahko uporabnik nastavlja lastnosti slike kamere in tako sliko prilagodi, da lahko algoritem kar najbolj
uÂ£inkovito opravlja svoje delo. Nastavljive so naslednje lastnosti kamere:

Lastnost Brightness
Lastnost se uporablja za nastavljanje svetlosti slike, ki jo zajemamo s kamero.
Sistem vsakemu slikovnemu elementu priÂ²teje konstanto, kar pomeni, da vsako
sliko posvetli ali potemni. ViÂ²ja vrednost lastnosti pomeni svetlejÂ²o sliko.

Lastnost Gamma
Lastnost se uporablja za nastavljanje vrednosti popravka game slike, ki jo
zajemamo. S tem kompenziramo nelinearno obnaÂ²anje parametrov slike.
Popravek gama je parameter, ki nam omogoÂ£a pravilno prikazati zajeto
sliko na ekranu.

Pri deniranju svetlosti slikovnega elementa se na monito-

rjih pojavljajo odstopanja od nastavljene vrednosti svetlosti. Âƒe doloÂ£enemu
monitorju poÂ²ljemo informacijo, da je svetlost nekega slikovnega elementa

x,

se v praksi izkaÂºe, da naprava prikaÂºe svetlost tistega slikovnega elementa z
Î³
vrednostjo x .
Parameter

Î³

se lahko od monitorja do monitorja razlikuje. TipiÂ£no se na

monitor poÂ²ilja vrednost svetlosti slikovnega elementa med 0 in 1. To pomeni,
da Â£e je vrednost parametra

Î³ = 2, 2

in nastavljena vrednost slikovnega ele0, 52,2 , kar znese

menta 0,5, bo prikazana vrednost na zaslonu imela svetlost

0,2176. Torej bo prikazana slika na monitorju videti temnejÂ²a, kot bi glede na
nastavitve Âºeleli. Situacijo opisuje formula:
Î³

L=V ,

kjer je V nastavljena vrednost svetlosti in L prikazana vrednost svetlosti.
ReÂ²itev za omenjeni problem je popravek gama.

Vhodni signal, ki doloÂ£a

svetlost slikovnega elementa, popravimo tako, da dobljeno vrednost potenciramo z inverzom parametra

Î³

(slika 3.5 [15]).

Poglavje 3: Programski modul za nadzor procesa z digitalno kamero

30

Slika 3.5: Graf vrednosti signala in njegovega gamma popravka

Pri vpeljevanju popravka gama torej uporabimo formulo:
1

L0 = L Î³

V primeru vrednosti parametra 2,2, nastavljene vrednosti svetlosti slikovnega
1
0
elementa 0,5 in dobljene vrednosti 0,2176, dobimo vrednost L = 0, 2176 2,2 =
0, 21760,45455 = 0, 5, kar pa ustreza originalni vrednosti svetlosti slikovnega
elementa, ki jo Âºelimo nastaviti.

Lastnost Gain
Lastnost se uporablja za ojaÂ£anje slike, ki jo zajemamo. Vsak slikovni element
se pomnoÂºi z nastavljeno vrednostjo. S poveÂ£anjem te funkcije tako izboljÂ²amo
kontrast slike. Âƒe sliko ojaÂ£amo preveÂ£, lahko na njej opazimo Â²um.

Lastnost AutoGain
Lastnost omogoÂ£a vklop, ali izklop avtomatske funkcije nastavljanja ojaÂ£anja
slike. Pri nastavljanju vrednosti si modul pomaga z vrednostjo lastnosti AutoReference.

Lastnost Exposure
Lastnost nastavlja Â£as osvetlitve slike, ki jo zajemamo.

VeÂ£ja kot je njena

vrednost, veÂ£ svetlobe bo priÂ²lo do senzorja. Pri zajemanju slike zelo svetlega
predmeta mora biti Â£as osvetlitve majhen.

3.3 Programska reÂ²itev kontrole s kamero

31

Lastnost AutoExposure
Lastnost omogoÂ£a avtomatsko regulacijo Â£asa osvetlitve slike. Pri nastavljanju
vrednosti si modul pomaga z vrednostjo lastnosti AutoReference.

Lastnost AutoReference
Ta lastnost se uporablja kot referenÂ£na vrednost za avtomatske algoritme,
ki regulirajo avtomatsko osvetlitev, avtomatsko ojaÂ£anje slike in avtomatsko
nastavljanje zaslonke. Glede na vrednost tega parametra se bodo algoritmi odloÂ£ali, kako nastavljati druge parametre glede na trenutno stanje slike, ki jim jo
kamera posreduje. V primeru, da je glede na vrednost lastnosti slika pretemna,
potem sistem najprej odpira zaslonko, dokler je popolnoma ne odpre. Âƒe to
ne zadostuje poveÂ£uje parameter izpostavljenosti svetlobi do vrednosti lastnosti MaxExposure. Kadar tudi to ni dovolj zaÂ£ne poveÂ£evati vrednost lastnosti Gain. V primeru, da je slika presvetla, sistem izvede postopek, obraten
postopku za primer pretemne slike: najprej zmanjÂ²a vrednost lastnosti Gain,
nato krajÂ²a Â£as izpostavljenosti svetlobi, nazadnje pa zaÂ£ne z zapiranjem zaslonke.

Lastnost AutoIris
Lastnost omogoÂ£a avtomatsko regulacijo odpiranja ali zapiranja zaslonke kamere.
Pri nastavljanju vrednosti si modul pomaga z vrednostjo lastnosti AutoReference.

Lastnost IrisSpeed
Lastnost, s katero lahko kontroliramo hitrost odpiranja ali zapiranja zaslonke
kamere. KnjiÂºnica za delo s kamero ponuja Â²tiri moÂºne hitrosti: 1, 2, 3 in 4,
kjer manjÂ²a Â²tevilka pomeni poÂ£asnejÂ²o hitrost premikanja zaslonke.

Lastnost OpenIris
S pomoÂ£jo tega gumba uporabnik roÂ£no odpira zaslonko kamere.
se odpira s hitrostjo, doloÂ£eno v lastnosti IrisSpeed.

Zaslonka

Zaslonka se odpira to-

liko Â£asa, dokler uporabnik zadrÂºuje miÂ²kin gumb v pritisnjenem stanju nad
gumbom Open iris.

32

Poglavje 3: Programski modul za nadzor procesa z digitalno kamero

Lastnost CloseIris
S pomoÂ£jo tega gumba uporabnik roÂ£no zapira zaslonko kamere. Hitrost zapiranja doloÂ£a lastnost IrisSpeed. Zaslonka se zapira toliko Â£asa, dokler uporabnik zadrÂºuje miÂ²kin gumb v pritisnjenem stanju nad gumbom Close iris.

Lastnost Damping
S to lastnostjo blaÂºimo spremembe pri avtomatskem nastavljanju parametrov
kamere. VeÂ£ja kot je vrednost lastnosti, manj radikalne bodo avtomatske spremembe slike, ki jih nastavljajo avtomatski algoritmi.

3.3.2.4

Nastavljanje generiÂ£nih vhodnih parametrov

Programskemu modulu kamere lahko uporabnik doloÂ£i do 10 generiÂ£nih vhodnih parametrov. Z njimi sistemu posreduje vrednosti, katere lahko algoritem
za obdelavo slike uporablja med svojim delovanjem. Denira se jih tako, da
kontrolniku SCADA nastavimo vrednost lastnosti InputNames, v kateri deniramo imena generiÂ£nih vhodnih parametrov (glej poglavje 3.3.1).

Za vsako

ime, ki se nahaja v lastnosti InputNames, sistem zgenerira kontrolo na uporabniÂ²kem vmesniku. Vrednost generiÂ£nih parametrov je posredovana v sistem s
pomoÂ£jo signala, ki je lahko digitalen, ali analogen (glej 3.4).

Glede na tip

signala, ki je prikljuÂ£en na mesto poimenovanega generiÂ£nega parametra, se
zgenerira ustrezen uporabniÂ²ki vmesnik: drsnik in vnosno polje za analogne
signale in kontrolnik za izbiro stanja tipa boolean za digitalne signale.

3.3.2.5

Prikaz slike

Okno za prikaz slike prikazuje sliko, ki jo poÂ²ilja kamera preko prikazovalnikovega podatkovnega toka. Nanjo vplivajo nastavitve, ki so speciÂ£ne za prikazovalnikov tok podatkov. Prednastavljena je velikost slike 1024Ã—768 slikovnih
elementov. Sliko lahko na prikazovalniku zmanjÂ²amo in prikaÂºemo samo njen
del tako, da v nastavitvah kontrolnika SCADA deniramo obmoÂ£je ROI (z
uporabo lastnosti ROIWidth in ROIHeight), ki je manjÂ²e od prednastavljene velikosti slike. V tem primeru lahko doloÂ£amo kateri del slike je prikazan
na zaslonu. To storimo z uporabo drsnikov dela uporabniÂ²kega vmesnika za
nastavljanje interesnega obmoÂ£ja slike na glavnem oknu kamere.
Slika je uporabniku prikazana samo v primeru, da je v glavnem menuju
izbrana opcija Enable camera. Kadar je slika uporabniku vidna, lahko po Âºelji
vkljuÂ£imo opcijo graÂ£nega prikaza izraÂ£unanih, ali nastavljenih parametrov z

3.4 Povezava modula z glavno aplikacijo

33

opcijo Show overlay. GraÂ£ni parametri, prikazani na zaslonu, se razlikujejo
od ltra do ltra, njihove specikacije morajo biti podane v specikaciji ltra.

3.4 Povezava modula z glavno aplikacijo
Programski modul za nadzor kamere podatke za delovanje pridobiva iz dveh
virov.

Podatki, ki se med delovanjem sistema ne spreminjajo, so shranjeni

v podatkovni bazi, modul pa jih prebere ob inicializaciji povezave s ziÂ£no
napravo.
Vrednosti podatkov se nastavlja s pomoÂ£jo posebnih urejevalnikov lastnosti naprav, njihove spremembe pa glavna aplikacija upoÂ²teva Â²ele ob vsakem
novem zagonu in se med delovanjem sistema ne spreminjajo. Za parametre,
katerih vrednost se med delovanjem sistema spreminja, poskrbi poseben komunikacijski mehanizem, vgrajen v sistemski del glavne aplikacije. Vsak takÂ²en
podatek v modulu kamere je povezan z aplikacijo kot bodisi vhodni bodisi
izhodni signal.

Programski modul za nadzor kamere si lahko predstavljamo

kot Â£rno Â²katlo (slika 3.6): vhodni signali posredujejo informacije iz zunanjega
okolja v modul kamere, ta s pomoÂ£jo pridobljenih podatkov opravi izraÂ£une in
jih nato posreduje v zunanje okolje v obliki izhodnih signalov.
Signali za prenos podatkov med modulom kamere in glavno aplikacijo so
lahko dveh tipov:

digitalni ali analogni.

Digitalni signali lahko zavzamejo

vrednost 0 ali 1, analogni pa katerokoli vrednost, predstavljivo s 64 bitno
predstavitvijo Â²tevila s plavajoÂ£o vejico.
Podatke, ki jih v okolje s pomoÂ£jo izhodnih signalov poÂ²ilja modul kamere,
lahko deli sistema SCADA uporabljajo za razliÂ£ne namene, bodisi za dodatno
obdelavo podatkov bodisi za komunikacijo z razliÂ£nimi ziÂ£nimi napravami s
pomoÂ£jo kontrolnikov PLC. Podobno se podatki, ki se spreminjajo med delovanjem sistema SCADA iz zunanjega okolja, prenaÂ²ajo v modul kamere s pomoÂ£jo vhodnih signalov. TakÂ²ni podatki lahko pridejo iz razliÂ£nih virov. Lahko
so rezultat razliÂ£nih nastavitev v graÂ£nem uporabniÂ²kem vmesniku, lahko so
rezultat razliÂ£nih algoritmov, ki delujejo v sistemu SCADA, lahko pa so tudi
vrednosti, posredovane iz ziÂ£nih naprav, kot so raznovrstni senzorji povezani
preko kontrolnikov PLC. TakÂ²en naÂ£in komunikacije modula kamere z glavno
aplikacijo omogoÂ£a preprosto integracijo z obstojeÂ£im sistemom SCADA, se
odziva na spremembe okolja in vanj poÂ²ilja ustrezne podatke.

34

Poglavje 3: Programski modul za nadzor procesa z digitalno kamero

Slika 3.6: Shema programskega modula za nadzor kamere

3.5 Arhitektura sistema
ReÂ²itev za nadzor proizvodnega sistema s pomoÂ£jo kamere je zasnovana tako,
da znotraj obstojeÂ£ega sistema deluje kot zakljuÂ£ena celota, ki zdruÂºuje kontrolne elemente za delo s kamero.
nikacijo z glavno aplikacijo.

Vsebuje potrebne mehanizme za komu-

To modulu kamere omogoÂ£a, da se z le nekaj

manjÂ²imi nastavitvami v konguraciji vkljuÂ£i v celoten sistem SCADA. modul
kamere vsebuje vizualne dele, ki uporabniku ponujajo preprost graÂ£ni vmesnik za delo s kamero. Programski deli nadzorujejo napravo, prenaÂ²ajo podatke
med deli kontrole kamere in jih usklajujejo.

Posebni komunikacijski deli pa

poskrbijo za komunikacijo med modulom in aplikacijo.
Na sliki 3.7 je prikazana osrednja programska enota, poimenovana nadzor
kamere, ki sem jo implementiral kot osrednjo stiÂ£no toÂ£ko za povezavo delov modula. SluÂºi kot povezava med ziÂ£no napravo, vizualnimi deli modula
kamere in glavno aplikacijo. Ob zagonu sistema preveri ali je kamera prisotna
v omreÂºju. Âƒe je njeno iskanje uspeÂ²no, poskrbi za osnovno vzpostavitev ko-

3.5 Arhitektura sistema

35

Slika 3.7: Arhitektura sistema nadzora kamere

munikacijskih vmesnikov med modulom in glavno aplikacijo. Ko je postopek
konÂ£an, lahko deli modula s pomoÂ£jo nadzora kamere nastavljajo parametre
na ziÂ£ni napravi. TakÂ²ni parametri so odpiranje in zapiranje zaslonke, nastavljanje razliÂ£nih parametrov zajema slike (svetlost, gama popravek ipd.). Vsi
podatki, ki jih obdeluje modul kamere, se prenaÂ²ajo med deli celotnega sistema
s pomoÂ£jo nadzora kamere. To vkljuÂ£uje podatke, ki jih modul poÂ²ilja glavni
aplikaciji, glavna aplikacija modulu ali katerikoli del sistema SCADA kameri
(ziÂ£ni napravi). Nadzor kamere pri inicializaciji povezave z napravo poskrbi
tudi za nastavljanje vseh morebitnih ltrov za obdelavo slike na podatkovni
tok podatkov, ki teÂ£e od izvora do ponora slike.
Z vidika celotnega proizvodnega sistema je glavna naloga podsistema za
delo s kamero posredovanje podatkov, ki jih modul kamere priskrbi iz pri-

Poglavje 3: Programski modul za nadzor procesa z digitalno kamero

36

dobljene slike.

Sistem je zasnovan na naÂ£in, da je za pridobivanje razliÂ£nih

podatkov preprosto zamenjati algoritem, ki iz slike izluÂ²Â£i podatek, pomemben za potrebe procesa.

Nadzor kamere ob inicializaciji preveri ali ima na

voljo implementacijo algoritma za obdelavo slike. Ta poleg postopka za pridobivanje podatkov, pomembnih za industrijski proces, vsebuje tudi kodo, ki (Â£e
je ta moÂºnost na voljo) informacije o podatkih tudi graÂ£no prikaÂºe na prikazovalnem delu podatkovnega toka. Âƒe je algoritem prisoten, modul kamere na
zahtevo glavne aplikacije njenemu sistemskemu delu posreduje parametre, ki
jih izraÂ£una pri obdelavi slike.
Sistemski del glavne aplikacije izraÂ£unava vrednosti s frekvenco 50 milisekund.

Glavna aplikacija torej lahko s tako frekvenco zahteva ali poÂ²ilja

podatke od modula kamere.

Ker je modul vezan na sistemske parametre,

od katerih nekateri nadzirajo funkcije ziÂ£ne naprave, bi se lahko zgodilo,
da bi napravo poplavili s prehitrimi zahtevki po spremembah parametrov.
Pri posredovanju parametrov med modulom in ziÂ£no napravo zato posreduje posebna programska nit, ki skrbi izkljuÂ£no za prenose parametrov med
tema dvema deloma reÂ²itve [16].

Nit poskrbi, da se spremembe posredujejo

izkljuÂ£no ob spremembah parametrov, tako iz smeri ziÂ£ne naprave kot iz smeri
programskega modula. Deluje tudi kot blaÂºilnik hitrih sprememb, ki bi potencialno lahko povzroÂ£ile napake in neodzivnost programskih knjiÂºnic, s katerimi
se kontrolira ziÂ£no napravo.
Vizualni del sistema za nadzor kamere je sestavljen iz kontrolnika SCADA
in glavnega okna kamere. Kontrolnik SCADA sluÂºi za integracijo v obstojeÂ£
vmesnik HMI. Sistemski del glavne aplikacije in vmesnik HMI sta povezana s
komunikacijskimi mehanizmi, ki si preko nadzora kamere sporoÂ£ajo vrednosti
parametrov.

Sistem glavne aplikacije je tako obveÂ²Â£en o spremembah vred-

nosti parametrov, ki jih uporabnik nastavlja v vizualnih delih modula kamere,
ti pa so obveÂ²Â£eni o spremembah, ki bi morebiti izvirale iz sistemskega dela
glavne aplikacije. Na ta naÂ£in je uporabniku zagotovljena ne samo moÂºnost
nadzora nad spreminjanjem podatkov, marveÂ£ tudi moÂºnost videti realno sliko
parametrov sistema.
Glavno okno kamere je poseben del za nadzor parametrov modula kamere,
ki je dostopno preko kontrolnika SCADA. Âƒeprav lahko uporabnik do glavnega
okna kamere dostopa le s pomoÂ£jo kontrolnika SCADA, pa ima lastne mehanizme za komunikacijo z nadzorom kamere.

Ko je uporabniku glavno okno

kamere na voljo, to za svoje delovanje in komunikacijo s sistemom ne potrebuje
kontrolnika SCADA in se obnaÂ²a kot popolnoma neodvisen del aplikacije. To je
Â²e posebej primerno za primer, ko Âºeli uporabnik imeti glavno okno kamere na
voljo tudi, ko uporablja kakÂ²en drug del aplikacije in Âºeli imeti zaprt vmesnik

3.6 Implementacija algoritmov za obdelavo slike

37

HMI.
Kontrolnik SCADA, sistemski del glavne aplikacije in nadzor kamere imajo
dostop do podatkov shranjenih v podatkovni bazi (slika 3.7). Ob inicializaciji
sistema, nadzor kamere iz nastavitev v podatkovni bazi prebere vrednosti
nekaterih parametrov, kot so serijska Â²tevilka kamere in tip kamere.

To so

parametri, ki jih nadzor kamere navadno potrebuje le ob zagonu sistema in se
med delovanjem sistema ne spreminjajo.
Modul kamere je sposoben izvajati razliÂ£ne algoritme za obdelavo slike,
vendar ne veÂ£ algoritmov hkrati. Aktivni algoritem se izbere s pomoÂ£jo nastavitve vrednosti lastnosti kontrolnika SCADA, zamenja pa se ga lahko le, ko je
izvajalni sistem glavne aplikacije ustavljen. Ob zagonu glavne aplikacije nadzor kamere pregleda programsko kodo in ugotovi ali vsebuje implementacijo
algoritma z imenom, podanim v lastnosti FilterName kontrolnika SCADA.

3.6 Implementacija algoritmov za obdelavo slike
Zajete slike lahko obdelujemo z implementacijo ltrov za obdelavo slike, ki
jih knjiÂºnice kamere po zajemu slike znajo uporabljati. Za implementacijo in
uporabo ltra je v programski kodi najprej treba kreirati razred ltra za obdelavo slike in dedovati [17] od razreda FrameFilterImpl.

Nato je potrebno

implementirati tri metode: GetSupportedInputTypes, GetTransformOutputTypes in Transform, ki skrbijo za obdelavo slike [18].

3.6.1

Metoda GetSupportedInputTypes

public void GetSupportedInputTypes(ArrayList frameTypes)
Metoda denira podprte naÂ£ine kodiranja slikovnih elementov, ki jih lter sprejme v obdelavo. Tipe kodiranja dodajamo v podatkovno strukturo ArrayList.
Primer za dodajanje podprtosti formatu Y800:

public override void GetSupportedInputTypes(
ArrayList frameTypes)
{
frameTypes.Add(new TIS.Imaging.FrameType(
TIS.Imaging.MediaSubtypes.Y800));
}

Poglavje 3: Programski modul za nadzor procesa z digitalno kamero

38

3.6.2

Metoda GetTransformOutputTypes

public bool GetTransformOutputTypes(FrameType inType,
ArrayList outTypes)
Metoda denira morebitne transformacije med formati v katerih so podani
slikovni elementi zajete slike. Parameter inType denira vhodni format, parameter outTypes pa vsebuje formate, katere lahko lter transformira iz danega
formata podanega v parametru inType.

Metoda vrne vrednost true, Â£e je

napolnila parameter outTypes z vrednostmi in false, Â£e ni na voljo nobena
transformacija.

V primeru, da transformacije formata, v katerem so podani

slikovni elementi, ne Âºelimo, lahko med izhodne formate podamo kar vhodni
format in vrnemo vrednost true:

public override bool GetTransformOutputTypes(FrameType inType,
ArrayList outTypes)
{
outTypes.Add(inType);
return true;
}
3.6.3

Metoda Transform

public bool Transform(IFrame src, IFrame dest)
Sistem nad vsako zajeto sliko izvede metodo Transform. To je metoda, ki izvaja
dejansko obdelavo slike. V parametru src je podana vhodna slika, v parametru
dest pa izhodna slika. V primeru, da izvedemo transformacijo nad parametrom
src in ga zapiÂ²emo v parameter dest uspeÂ²no, metoda vrne vrednost true. Âƒe
vrnemo vrednost false, se bo slika podana v parametru src zavrgla.
Zaradi laÂºje obdelave slike se uporablja unsafe blok kode, ki ga podpira programski jezik C# in nam s tem dovoljuje uporabo kazalcev. Znotraj takÂ²nega
bloka mora razvijalec, podobno kot v nekaterih drugih programskih jezikih,
sam poskrbeti za upravljanje s pomnilnikom, saj mu pri tem okolje .NET
pusti proste roke. Tako se lahko s pomoÂ£jo kazalcev premikamo po besedah
(angl. bytih) vhodne slike in nastavljamo vrednosti besed izhodne slike.

public override bool Transform(IFrame src, IFrame dest)
{

3.6 Implementacija algoritmov za obdelavo slike

39

unsafe
{
if (dest.Ptr == null) return false;
byte* pIn = src.Ptr;
byte* pOut = dest.Ptr;
//zapiÂ²imo nespremenjen slikovni element
//na lokaciji kazalca *pIn
//na pozicijo kazalca *pOut
*pOut = *pIn;
}
}
Ker metoda Transform teÂ£e v drugi programski niti [16], je treba v primeru, da
Âºelimo kodi metode posredovati kakÂ²ne posebne parametre, ki smo jih doloÂ£ili
v algoritmu, te posredovati v bloku BeginParameterTransfer() in EndParameterTransfer().

Blok znotraj teh dveh metod poskrbi za sinhronizacijo in se

tako izogne neÂºelenim ustavitvam sistema zaradi dostopa do iste pomnilniÂ²ke
lokacije iz veÂ£ programskih niti. Po konÂ£ani implementaciji zahtevanih metod
ltra lahko lter uporabimo tako, da kreiramo njegovo instanco, jo posredujemo metodi FrameFilterCreate in lter je pripravljen. Lahko ga dodamo na
ustrezen podatkovni tok kot vsak drug lter, ki je del knjiÂºnice IC Imaging
Control.
Ker je modul kamere zasnovan tako, da bi bila implementacija algoritmov
za obdelavo slike kar se da preprosta, za doloÂ£ene zgoraj opisane vidike implementacije posebnih algoritmov uporabniku ni treba skrbeti. Âƒe uporabnik Âºeli
implementirati nov algoritem za obdelavo slike, mora kreirati razred algoritma,
ki deduje od razreda FilterBase in ga opremiti z atributom ImagingFilter, s
katerim oznaÂ£i ime algoritma. Primer deklaracije takÂ²nega razreda:

[ImagingFilter(BrightnessThresholdFilter)]
internal class BrightnessThresholdFilter : FilterBase
{
}
V takÂ²nem razredu lahko uporabnik implementira dve metodi za obdelavo
slike: ProcessImageData, v kateri implementira algoritem za obdelavo slike in
PaintOverlay, kjer lahko implementira morebiten dodaten prikaz podatkov na
sliki.

Poglavje 3: Programski modul za nadzor procesa z digitalno kamero

40

3.6.4

Metoda ProcessImageData

protected override unsafe void ProcessImageData(
TIS.Imaging.IFrame data)
Znotraj te metode uporabnik implementira algoritem za obdelavo slike.

Do

vhodnih parametrov kamerinega modula lahko dostopa s pomoÂ£jo objekta
RuntimeParameters. Tako bi do prvega vhodnega parametra modula dostopal
na naslednji naÂ£in:

int xPos = (int)IcControl.RuntimeParameters.Input0;
Podatke lahko poÂ²ilja na izhode modula z metodo SetOutputUnsafe. Na prvi
izhod modula bi tako poslal vrednost 100 na naslednji naÂ£in:

IcControl.SetOutputUnsafe(0, 100);
Do posameznih slikovnih elementov slike lahko uporabnik znotraj te metode
dostopa na enak naÂ£in kot je opisan pri uporabi metode Transform (glej 3.6.3).

3.6.5

Metoda PaintOverlay

public override void PaintOverlay(OverlayBitmap overlay)
V primeru, da Âºeli uporabnik na prikazovalni del glavnega okna kamere dodati
graÂ£ne elemente, ki jih kamera ne zajema, lahko to stori z implementacijo te
metode. S klicem metode:

Graphics g = overlay.GetGraphics();
dobi dostop do standardnega C# graÂ£nega objekta, s pomoÂ£jo katerega lahko
riÂ²e poljubne graÂ£ne elemente, katere modul kamere prikaÂºe na prikazovalnem
delu glavnega okna kamere. VeÂ£ o delu z graÂ£nim objektom bralec lahko najde v [19].
V primeru uporabljenega algoritma pri procesu izdelave surovca optiÂ£nega
vlakna, je bilo potrebno za implementacijo novega algoritma implementirati
metodo ProcessImageData in metodo PaintOverlay za prikaz dodatnih informacij na zajeti sliki (speciÂ£en primer uporabe razvitega modula je opisan
v poglavju 4).

Ukvarjanje z bolj speciÂ£nimi vidiki vkljuÂ£evanja algoritmov

v modul je razvijalcu algoritmov prihranjeno.

Z opisanimi naÂ£ini dostopa

do parametrov modula (glej 3.6.4) ima uporabnik pri implementaciji algoritmov na voljo vsa sredstva za komunikacijo s sistemom glavne aplikacije preko
vhodov in izhodov modula kamere.

Poglavje 4
Primer uporabe
Modul, ki sem ga razvil in opisal v tej diplomski nalogi, je bil najprej preizkuÂ²en
pri nadzoru procesa izdelave surovca za optiÂ£na vlakna [6].

Kamera je v

realnem Â£asu zajemala sliko obdelovanca in jo preko nadzora kamere (glej
poglavje 3.5) poÂ²iljala v sistem glavne aplikacije.

Ta je rezultate obdelave

slike nato uporabil za razliÂ£ne izraÂ£une, na njihovi podlagi pa je nadzoroval
potek doloÂ£enih delov proizvodnega procesa. Razviti modul je operaterju, ki je
vodil proces, omogoÂ£il prilagoditev modulovega vmesnika potrebam konkretnega proizvodnega procesa.

Glede na potrebe procesa je operater nastavil

lastnostim kontrolnika SCADA naslednje vrednosti:

<MaxExposure>333</MaxExposure>
<FilterName>BrightnessThresholdFilter</FilterName>
<FilterParameters>0</FilterParameters>
<FlipHorizontal>true</FlipHorizontal>
<FlipHorizontalDisplay>false</FlipHorizontalDisplay>
<AutoMaxExposure>false</AutoMaxExposure>
<FlipVertical>false</FlipVertical>
<FlipVerticalDisplay>false</FlipVerticalDisplay>
<FrameRate>30</FrameRate>
<ImageFormat>Y800</ImageFormat>
<InputNames>XPos;XWidth;Threshold</InputNames>
<ROIHeight>768</ROIHeight>
<ROIWidth>1024</ROIWidth>
<Rotation>Deg90</Rotation>
<RotationDisplay>None</RotationDisplay>
Interesno obmoÂ£je slike, doloÂ£eno z lastnostima ROIWidth in ROIHeight, je
operater nastavil kar na celotno obmoÂ£je zajete slike, to je 1024Ã—768 slikovnih

41

42

Poglavje 4: Primer uporabe

elementov (za opis lastnosti kontrolnika SCADA glej poglavje 3.3.1).

Za

potrebe uporabljenega algoritma za obdelavo slike, je operater sliko rotiral za
90 stopinj in preslikal po horizontali. To sta mu na preprost naÂ£in omogoÂ£ili
lastnosti kontrolnika SCADA Rotation in FlipHorizontal.

Rezultat nas-

tavitev prikazuje slika 4.1 glavnega okna kamere narejena med izvajanjem
procesa.

Slika 4.1: Glavno okno kamere med potekom procesa

Parametre za potrebe proizvodnega procesa je raÂ£unal algoritem z imenom
BrightnessThresholdFilter. Algoritem je za potrebe procesa Âºelel razviti naroÂ£nik sam, kar modul, ki sem ga razvil, tudi omogoÂ£a.
zaradi konkurenÂ£ne prednosti algoritem tukaj ni opisan.

Na Âºeljo naroÂ£nika
NaroÂ£nik je algo-

ritem lahko vkljuÂ£il v sistem s postopkom, opisanim v poglavju 3.6. Ker so
Âºeleli nekatere rezultate in parametre algoritma prikazati na zaslonu, sem njihovi implementaciji algoritma dodal moÂºnost prikaza doloÂ£enih parametrov
na prikazovalni del glavnega okna kamere (slika 4.1). PomembnejÂ²i rezultati
obdelave slike, ki jih je omenjeni algoritem raÂ£unal in poÂ²iljal sistemu glavne
aplikacije v obdelavo, so srediÂ²Â£e in robovi obdelovanca. SrediÂ²Â£e sem v prikazovalnem delu glavnega okna slike prikazal z rumeno horizontalno Â£rto po celi

43

Slika 4.2: Avtomatsko generiran uporabniÂ²ki vmesnik za nastavljanje vhodnih
parametrov

Â²irini slike, robova pa z oranÂºnima horizontalnima Â£rtama.
Za potrebe delovanja algoritma je operater kontrolniku SCADA podal
tri vhodne parametre: XPos, XWidth in Threshold.
bili posredovani z analognimi signali (glej 3.4).

Vsi trije parametri so

Modul kamere je s pomoÂ£jo

vrednosti, podanimi v lastnosti InputNames kontrolnika SCADA, generiral tri
vhodne kontrolnike, sestavljene iz drsnika in vnosnega polja. Z njimi je bilo
mogoÂ£e nastavljati vrednosti omenjenih vhodnih parametrov (slika 4.2).

Za

opis postopka avtomatskega generiranja uporabniÂ²kega vmesnika glej poglavje
3.3.2.4.
Vrednosti parametrov XPos in XWidth sem na Âºeljo naroÂ£nika graÂ£no
prikazal na prikazovalnem delu glavnega okna kamere (glej poglavje 3.6.5). Pri
uporabljeni implementaciji algoritma sta prikazana z obmoÂ£jem rdeÂ£e barve, ki
poteka po celotni viÂ²ini sike od njenega zgornjega do spodnjega roba. Parameter XPos doloÂ£a pozicijo skrajno levega dela tega obmoÂ£ja, parameter XWidth
pa Â²irino tega obmoÂ£ja. Z uporabo avtomatsko generiranih drsnikov in vnosnih polj za omenjena parametra, lahko operater med obdelavo slike nastavlja
vrednosti teh parametrov. RdeÂ£e obmoÂ£je se premika glede na nastavitve in
mu nazorno prikazuje rezultate njegovega dela.
Zaradi prilagodljive zasnove modula kamere si je operater procesa lahko
popolnoma prilagodil razviti modul glede na potrebe speciÂ£nega surovca za
optiÂ£na vlakna, ki ga je v tistem trenutku obdeloval. Prilagojen uporabniÂ²ki
vmesnik modula kamere je operaterju omogoÂ£il nadzor nad obdelovancem v
procesu, preprosto kontrolo doloÂ£enih (tudi posebej za ta primer deniranih)
procesnih spremenljivk in spremljanje rezultatov njegovih nastavitev na zaslonu v realnem Â£asu.

Poglavje 5
ZakljuÂ£ek
Pri izdelavi diplomske naloge sem naÂ£rtoval in implementiral programsko reÂ²itev
za krmiljenje industrijskega procesa s pomoÂ£jo digitalne kamere. Posebej v ta
namen sem razvil uporabniÂ²ki vmesnik za upravljanje tako s ziÂ£no napravo
kot s parametri procesa.
UporabniÂ²ki vmesnik se brez teÂºav integrira v obstojeÂ£i sistem kot del vmesnika HMI. S pomoÂ£jo programskih knjiÂºnic modul nadzira nastavitve kamere
in od nje pridobiva informacije. Vmesnik za nadzor kamere je zasnovan tako,
da se vanj lahko vkljuÂ£ijo razliÂ£ni algoritmi za obdelavo slik, ki lahko sluÂºijo
razliÂ£nim namenom. Rezultati, ki jih algoritmi producirajo, se lahko posredujejo drugim algoritmom v obdelavo, Â£e pa je zaradi narave procesa smiselno,
lahko te rezultate aplikacija posreduje razliÂ£nim komunikacijskim modulom ali
kontrolnikom PLC za neposredno kontrolo naprav. Ker je programska reÂ²itev
integrirana v sistem SCADA obstojeÂ£e aplikacije (in bi v skrajnem primeru
skupaj s ziÂ£nimi krmilniki lahko bila sama svoj, sicer zelo okrnjen, sistem
SCADA), bi lahko rekli, da je razvita generiÂ£na reÂ²itev, ki jo lahko uporabimo
za kontrolo razliÂ£nih industrijskih procesov.
Kot verjetno pri vsakem kontrolnem sistemu, bi se tudi pri razvitem modulu
lahko naÂ²le moÂºnosti za izboljÂ²ave.

Poleg izboljÂ²av uporabniÂ²kega vmesnika

je v procesu Â²e nekaj prostora za optimizacijo z dodajanjem razliÂ£nih ltrov
na podatkovni tok zajete slike.

MoÂºnost izboljÂ²ave vidim tudi v morebitni

dodatni funkcionalnosti za dinamiÂ£no dodajanje in odvzemanje algoritmov za
obdelavo slike.

Ker pa so v industriji funkcionalnosti kontrolnega sistema

v veliki meri doloÂ£ene s procesom, ki ga upravljajo, je generiÂ£na reÂ²itev, ki
dopuÂ²Â£a raznovrstne dodelave, dobra osnova za reÂ²evanje zapletenih izzivov
krmiljenja proizvodnih procesov.

44

Slike
3.1

Kamera DMx 31AG03.I

3.2

32-bitna RGBA predstavitev barve

3.3

Arhitektura modula za zajemanje in obdelavo slike

3.4

Glavno okno kamere

3.5

Graf vrednosti signala in njegovega gamma popravka

3.6

Shema programskega modula za nadzor kamere

3.7

Arhitektura sistema nadzora kamere

4.1
4.2

. . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .

16
18

. . . . . . .

20

. . . . . . . . . . . . . . . . . . . . . . . .

27

. . . . . .

30

. . . . . . . . .

34

. . . . . . . . . . . . . . .

35

Glavno okno kamere med potekom procesa . . . . . . . . . . . .

42

Avtomatsko generiran uporabniÂ²ki vmesnik za nastavljanje vhodnih parametrov

. . . . . . . . . . . . . . . . . . . . . . . . . . .

45

43

Tabele
3.1

Specikacije kamere . . . . . . . . . . . . . . . . . . . . . . . . .

46

17

Literatura
[1] Bolton W.: Programmable logic controllers. Elsevier, Burlington, ZDA,
2009
[2] Bailey D., Wright E.: Practical SCADA for industry. Elsevier, Oxford,
Velika Britanija, 2003, strani 1-4, 17
[3] Wiles J.: Techno Security's guide to securing SCADA. Elsevier, Burlington, ZDA, 2007, stran 66
[4] Mahalik N. P.:

Fieldbus technology:

Industrial network standards for

real-time distributed control. Springer, Berlin, 2003, strani 10-12
[5] Kalapatapu R.: SCADA protocols and communication trends. Dostopno
na:
http://www.isa.org/intech/April2005/NetCommDept
(datum zadnjega obiska: 10. 4. 2011)
[6] Freudenrich C.: How ber optics work. Dostopno na:
http://communication.howstuworks.com/ber-opticcommunications/ber-optic5.htm

(datum

zadnjega

obiska:

9.

4.

2011)
[7] Brandl D.: Design patterns for exible manufacturing. ISA - Instrumentation, Systems and Automation society, United states, 2006, strani 20-22
[8] Microsoft, Overview of the .NET framework. Dostopno na:
http://msdn.microsoft.com/en-us/library/a4t23ktk.aspx
(datum zadnjega obiska: 15. 4. 2011)
[9] PC-based Control: The new performance class of Beckho Industrial PCs.
PC-Control, November 2010, strani 8-11

47

48

LITERATURA

[10] TwinCat 3 - Convergence of technologies. Dostopno na:
http://www.pc-control.net/pdf/042010/pcc_0410_twincat3_e.pdf
(datum zadnjega obiska: 20. 4. 2011)
[11] The Imaging Source Cameras. Dostopno na:
http://www.theimagingsource.com/en_US/products/cameras/gige-ccdmono/dmk31ag03i/
(datum zadnjega obiska: 25. 4. 2011)
[12] Petrou M., Petrou C.: Image processing: The fundamentals, 2nd edition.
John Wiley & Sons, Chichester, Velika Britanija, 2010
[13] RGBA color space. Dostopno na:
http://en.wikipedia.org/wiki/RGBA_color_space
(datum zadnjega obiska: 25. 4. 2011)
[14] The Imaging Source Europe GmbH: IC Imaging Control .NET: Frame
lters. Dostopno na:
http://www.imagingcontrol.com/en_US/support/documentation/
dotnet/tech_FrameFilter.htm (datum zadnjega obiska: 20. 4. 2011)
[15] Gamma correction. Dostopno na:
http://en.wikipedia.org/wiki/Gamma_correction
(datum zadnjega obiska: 25. 4. 2011)
[16] Microsoft: Threads and Threading. Dostopno na:
http://msdn.microsoft.com/en-us/library/aa720724%28v=vs.71%29.aspx
(datum zadnjega obiska: 15. 4. 2011)
[17] Microsoft: Inheritance (C# programming guide). Dostopno na:
http://msdn.microsoft.com/en-us/library/ms173149%28v=VS.100%29.aspx
(datum zadnjega obiska: 15. 4. 2011)
[18] The Imaging Source Europe GmbH: Writing a Frame Filter: Binarization.
Dostopno na:
http://www.imagingcontrol.com/en_US/support/documentation/
dotnet/Binarization.htm
(datum zadnjega obiska: 20. 4. 2011)
[19] Graphics class. Dostopno na:
http://msdn.microsoft.com/en-us/library/system.drawing.graphics.aspx
(datum zadnjega obiska: 25.4.2011)

